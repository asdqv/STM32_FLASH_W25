
SPI_Flash.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d44  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08002e50  08002e50  00003e50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ec0  08002ec0  0000405c  2**0
                  CONTENTS
  4 .ARM          00000008  08002ec0  08002ec0  00003ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002ec8  08002ec8  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ec8  08002ec8  00003ec8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ecc  08002ecc  00003ecc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002ed0  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000029c  2000005c  08002f2c  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002f8  08002f2c  000042f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000080b3  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001650  00000000  00000000  0000c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000828  00000000  00000000  0000d788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000063f  00000000  00000000  0000dfb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016f9c  00000000  00000000  0000e5ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009932  00000000  00000000  0002558b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b3d  00000000  00000000  0002eebd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b29fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c0  00000000  00000000  000b2a40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b5000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002e38 	.word	0x08002e38

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002e38 	.word	0x08002e38

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <SPI1_Send>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void SPI1_Send(uint8_t *dt, uint16_t cnt){
 800015c:	b580      	push	{r7, lr}
 800015e:	b082      	sub	sp, #8
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	460b      	mov	r3, r1
 8000166:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Transmit(&hspi1, dt, cnt, 5000);
 8000168:	887a      	ldrh	r2, [r7, #2]
 800016a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800016e:	6879      	ldr	r1, [r7, #4]
 8000170:	4803      	ldr	r0, [pc, #12]	@ (8000180 <SPI1_Send+0x24>)
 8000172:	f001 fa7b 	bl	800166c <HAL_SPI_Transmit>
}
 8000176:	bf00      	nop
 8000178:	3708      	adds	r7, #8
 800017a:	46bd      	mov	sp, r7
 800017c:	bd80      	pop	{r7, pc}
 800017e:	bf00      	nop
 8000180:	20000078 	.word	0x20000078

08000184 <SPI1_Recv>:
void SPI1_Recv(uint8_t *dt, uint16_t cnt){
 8000184:	b580      	push	{r7, lr}
 8000186:	b082      	sub	sp, #8
 8000188:	af00      	add	r7, sp, #0
 800018a:	6078      	str	r0, [r7, #4]
 800018c:	460b      	mov	r3, r1
 800018e:	807b      	strh	r3, [r7, #2]
	HAL_SPI_Receive(&hspi1, dt, cnt, 5000);
 8000190:	887a      	ldrh	r2, [r7, #2]
 8000192:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000196:	6879      	ldr	r1, [r7, #4]
 8000198:	4803      	ldr	r0, [pc, #12]	@ (80001a8 <SPI1_Recv+0x24>)
 800019a:	f001 fbab 	bl	80018f4 <HAL_SPI_Receive>
}
 800019e:	bf00      	nop
 80001a0:	3708      	adds	r7, #8
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	20000078 	.word	0x20000078

080001ac <w25_Reset>:
void w25_Reset(void){
 80001ac:	b580      	push	{r7, lr}
 80001ae:	af00      	add	r7, sp, #0
	cs_set();
 80001b0:	2200      	movs	r2, #0
 80001b2:	2110      	movs	r1, #16
 80001b4:	4809      	ldr	r0, [pc, #36]	@ (80001dc <w25_Reset+0x30>)
 80001b6:	f000 fdad 	bl	8000d14 <HAL_GPIO_WritePin>
	tx_buf[0] = w25_ENABLE_RESET;
 80001ba:	4b09      	ldr	r3, [pc, #36]	@ (80001e0 <w25_Reset+0x34>)
 80001bc:	2266      	movs	r2, #102	@ 0x66
 80001be:	701a      	strb	r2, [r3, #0]
	tx_buf[1] = w25_RESET;
 80001c0:	4b07      	ldr	r3, [pc, #28]	@ (80001e0 <w25_Reset+0x34>)
 80001c2:	2299      	movs	r2, #153	@ 0x99
 80001c4:	705a      	strb	r2, [r3, #1]
	SPI1_Send(tx_buf, 2);
 80001c6:	2102      	movs	r1, #2
 80001c8:	4805      	ldr	r0, [pc, #20]	@ (80001e0 <w25_Reset+0x34>)
 80001ca:	f7ff ffc7 	bl	800015c <SPI1_Send>
	cs_reset();
 80001ce:	2201      	movs	r2, #1
 80001d0:	2110      	movs	r1, #16
 80001d2:	4802      	ldr	r0, [pc, #8]	@ (80001dc <w25_Reset+0x30>)
 80001d4:	f000 fd9e 	bl	8000d14 <HAL_GPIO_WritePin>
}
 80001d8:	bf00      	nop
 80001da:	bd80      	pop	{r7, pc}
 80001dc:	40010800 	.word	0x40010800
 80001e0:	20000118 	.word	0x20000118

080001e4 <w25_Read_ID>:
	tx_buf[2] = (addr >> 8) & 0xFF;
	tx_buf[3] = addr & 0xFF;
	SPI1_Send(dat, sz);
	cs_reset();
}
uint32_t w25_Read_ID(void){
 80001e4:	b580      	push	{r7, lr}
 80001e6:	b082      	sub	sp, #8
 80001e8:	af00      	add	r7, sp, #0
	uint8_t dt[4];
	tx_buf[0] = w25_GET_JDEC_ID;
 80001ea:	4b10      	ldr	r3, [pc, #64]	@ (800022c <w25_Read_ID+0x48>)
 80001ec:	229f      	movs	r2, #159	@ 0x9f
 80001ee:	701a      	strb	r2, [r3, #0]
	cs_set();
 80001f0:	2200      	movs	r2, #0
 80001f2:	2110      	movs	r1, #16
 80001f4:	480e      	ldr	r0, [pc, #56]	@ (8000230 <w25_Read_ID+0x4c>)
 80001f6:	f000 fd8d 	bl	8000d14 <HAL_GPIO_WritePin>
	SPI1_Send(tx_buf, 1);
 80001fa:	2101      	movs	r1, #1
 80001fc:	480b      	ldr	r0, [pc, #44]	@ (800022c <w25_Read_ID+0x48>)
 80001fe:	f7ff ffad 	bl	800015c <SPI1_Send>
	SPI1_Recv(dt, 3);
 8000202:	1d3b      	adds	r3, r7, #4
 8000204:	2103      	movs	r1, #3
 8000206:	4618      	mov	r0, r3
 8000208:	f7ff ffbc 	bl	8000184 <SPI1_Recv>
	cs_reset();
 800020c:	2201      	movs	r2, #1
 800020e:	2110      	movs	r1, #16
 8000210:	4807      	ldr	r0, [pc, #28]	@ (8000230 <w25_Read_ID+0x4c>)
 8000212:	f000 fd7f 	bl	8000d14 <HAL_GPIO_WritePin>
	return (dt[0] << 16 | dt[1] << 8) | dt[2];
 8000216:	793b      	ldrb	r3, [r7, #4]
 8000218:	041a      	lsls	r2, r3, #16
 800021a:	797b      	ldrb	r3, [r7, #5]
 800021c:	021b      	lsls	r3, r3, #8
 800021e:	4313      	orrs	r3, r2
 8000220:	79ba      	ldrb	r2, [r7, #6]
 8000222:	4313      	orrs	r3, r2
}
 8000224:	4618      	mov	r0, r3
 8000226:	3708      	adds	r7, #8
 8000228:	46bd      	mov	sp, r7
 800022a:	bd80      	pop	{r7, pc}
 800022c:	20000118 	.word	0x20000118
 8000230:	40010800 	.word	0x40010800

08000234 <w25_Init>:
void w25_Init(void){
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
	HAL_Delay(100);
 800023a:	2064      	movs	r0, #100	@ 0x64
 800023c:	f000 fade 	bl	80007fc <HAL_Delay>
	w25_Reset();
 8000240:	f7ff ffb4 	bl	80001ac <w25_Reset>
	HAL_Delay(100);
 8000244:	2064      	movs	r0, #100	@ 0x64
 8000246:	f000 fad9 	bl	80007fc <HAL_Delay>
	unsigned int ID = w25_Read_ID();
 800024a:	f7ff ffcb 	bl	80001e4 <w25_Read_ID>
 800024e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)"\r\n",2,0x1000);
 8000250:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000254:	2202      	movs	r2, #2
 8000256:	490c      	ldr	r1, [pc, #48]	@ (8000288 <w25_Init+0x54>)
 8000258:	480c      	ldr	r0, [pc, #48]	@ (800028c <w25_Init+0x58>)
 800025a:	f001 ff68 	bl	800212e <HAL_UART_Transmit>
	 sprintf(str,"ID:0x%X\r\n", ID);
 800025e:	687a      	ldr	r2, [r7, #4]
 8000260:	490b      	ldr	r1, [pc, #44]	@ (8000290 <w25_Init+0x5c>)
 8000262:	480c      	ldr	r0, [pc, #48]	@ (8000294 <w25_Init+0x60>)
 8000264:	f002 f938 	bl	80024d8 <siprintf>
	 HAL_UART_Transmit(&huart1,(uint8_t*)str,strlen(str),0x1000);
 8000268:	480a      	ldr	r0, [pc, #40]	@ (8000294 <w25_Init+0x60>)
 800026a:	f7ff ff6f 	bl	800014c <strlen>
 800026e:	4603      	mov	r3, r0
 8000270:	b29a      	uxth	r2, r3
 8000272:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000276:	4907      	ldr	r1, [pc, #28]	@ (8000294 <w25_Init+0x60>)
 8000278:	4804      	ldr	r0, [pc, #16]	@ (800028c <w25_Init+0x58>)
 800027a:	f001 ff58 	bl	800212e <HAL_UART_Transmit>

}
 800027e:	bf00      	nop
 8000280:	3708      	adds	r7, #8
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	08002e50 	.word	0x08002e50
 800028c:	200000d0 	.word	0x200000d0
 8000290:	08002e54 	.word	0x08002e54
 8000294:	20000124 	.word	0x20000124

08000298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800029c:	f000 fa4c 	bl	8000738 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002a0:	f000 f80a 	bl	80002b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002a4:	f000 f8ae 	bl	8000404 <MX_GPIO_Init>
  MX_SPI1_Init();
 80002a8:	f000 f84c 	bl	8000344 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 80002ac:	f000 f880 	bl	80003b0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_UART_Transmit(&huart1, (uint8_t*)"Hello World\n", 12, 1000);
  w25_Init();
 80002b0:	f7ff ffc0 	bl	8000234 <w25_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002b4:	bf00      	nop
 80002b6:	e7fd      	b.n	80002b4 <main+0x1c>

080002b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002b8:	b580      	push	{r7, lr}
 80002ba:	b090      	sub	sp, #64	@ 0x40
 80002bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002be:	f107 0318 	add.w	r3, r7, #24
 80002c2:	2228      	movs	r2, #40	@ 0x28
 80002c4:	2100      	movs	r1, #0
 80002c6:	4618      	mov	r0, r3
 80002c8:	f002 f926 	bl	8002518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002cc:	1d3b      	adds	r3, r7, #4
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
 80002d2:	605a      	str	r2, [r3, #4]
 80002d4:	609a      	str	r2, [r3, #8]
 80002d6:	60da      	str	r2, [r3, #12]
 80002d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80002da:	2301      	movs	r3, #1
 80002dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80002de:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80002e4:	2300      	movs	r3, #0
 80002e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002e8:	2301      	movs	r3, #1
 80002ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002ec:	2302      	movs	r3, #2
 80002ee:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80002f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80002f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80002f6:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80002fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002fc:	f107 0318 	add.w	r3, r7, #24
 8000300:	4618      	mov	r0, r3
 8000302:	f000 fd1f 	bl	8000d44 <HAL_RCC_OscConfig>
 8000306:	4603      	mov	r3, r0
 8000308:	2b00      	cmp	r3, #0
 800030a:	d001      	beq.n	8000310 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800030c:	f000 f8b8 	bl	8000480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000310:	230f      	movs	r3, #15
 8000312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000314:	2302      	movs	r3, #2
 8000316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000318:	2300      	movs	r3, #0
 800031a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800031c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000322:	2300      	movs	r3, #0
 8000324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000326:	1d3b      	adds	r3, r7, #4
 8000328:	2102      	movs	r1, #2
 800032a:	4618      	mov	r0, r3
 800032c:	f000 ff8c 	bl	8001248 <HAL_RCC_ClockConfig>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000336:	f000 f8a3 	bl	8000480 <Error_Handler>
  }
}
 800033a:	bf00      	nop
 800033c:	3740      	adds	r7, #64	@ 0x40
 800033e:	46bd      	mov	sp, r7
 8000340:	bd80      	pop	{r7, pc}
	...

08000344 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000344:	b580      	push	{r7, lr}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000348:	4b17      	ldr	r3, [pc, #92]	@ (80003a8 <MX_SPI1_Init+0x64>)
 800034a:	4a18      	ldr	r2, [pc, #96]	@ (80003ac <MX_SPI1_Init+0x68>)
 800034c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800034e:	4b16      	ldr	r3, [pc, #88]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000350:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000354:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000356:	4b14      	ldr	r3, [pc, #80]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000358:	2200      	movs	r2, #0
 800035a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800035c:	4b12      	ldr	r3, [pc, #72]	@ (80003a8 <MX_SPI1_Init+0x64>)
 800035e:	2200      	movs	r2, #0
 8000360:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000362:	4b11      	ldr	r3, [pc, #68]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000364:	2200      	movs	r2, #0
 8000366:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000368:	4b0f      	ldr	r3, [pc, #60]	@ (80003a8 <MX_SPI1_Init+0x64>)
 800036a:	2200      	movs	r2, #0
 800036c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800036e:	4b0e      	ldr	r3, [pc, #56]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000370:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000374:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8000376:	4b0c      	ldr	r3, [pc, #48]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000378:	2220      	movs	r2, #32
 800037a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800037c:	4b0a      	ldr	r3, [pc, #40]	@ (80003a8 <MX_SPI1_Init+0x64>)
 800037e:	2200      	movs	r2, #0
 8000380:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000382:	4b09      	ldr	r3, [pc, #36]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000384:	2200      	movs	r2, #0
 8000386:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000388:	4b07      	ldr	r3, [pc, #28]	@ (80003a8 <MX_SPI1_Init+0x64>)
 800038a:	2200      	movs	r2, #0
 800038c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800038e:	4b06      	ldr	r3, [pc, #24]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000390:	220a      	movs	r2, #10
 8000392:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000394:	4804      	ldr	r0, [pc, #16]	@ (80003a8 <MX_SPI1_Init+0x64>)
 8000396:	f001 f8e5 	bl	8001564 <HAL_SPI_Init>
 800039a:	4603      	mov	r3, r0
 800039c:	2b00      	cmp	r3, #0
 800039e:	d001      	beq.n	80003a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80003a0:	f000 f86e 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003a4:	bf00      	nop
 80003a6:	bd80      	pop	{r7, pc}
 80003a8:	20000078 	.word	0x20000078
 80003ac:	40013000 	.word	0x40013000

080003b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80003b0:	b580      	push	{r7, lr}
 80003b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80003b4:	4b11      	ldr	r3, [pc, #68]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003b6:	4a12      	ldr	r2, [pc, #72]	@ (8000400 <MX_USART1_UART_Init+0x50>)
 80003b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80003ba:	4b10      	ldr	r3, [pc, #64]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003bc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80003c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80003c2:	4b0e      	ldr	r3, [pc, #56]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80003c8:	4b0c      	ldr	r3, [pc, #48]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80003ce:	4b0b      	ldr	r3, [pc, #44]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80003d4:	4b09      	ldr	r3, [pc, #36]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003d6:	220c      	movs	r2, #12
 80003d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80003da:	4b08      	ldr	r3, [pc, #32]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003dc:	2200      	movs	r2, #0
 80003de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80003e0:	4b06      	ldr	r3, [pc, #24]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003e2:	2200      	movs	r2, #0
 80003e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80003e6:	4805      	ldr	r0, [pc, #20]	@ (80003fc <MX_USART1_UART_Init+0x4c>)
 80003e8:	f001 fe51 	bl	800208e <HAL_UART_Init>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80003f2:	f000 f845 	bl	8000480 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80003f6:	bf00      	nop
 80003f8:	bd80      	pop	{r7, pc}
 80003fa:	bf00      	nop
 80003fc:	200000d0 	.word	0x200000d0
 8000400:	40013800 	.word	0x40013800

08000404 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000404:	b580      	push	{r7, lr}
 8000406:	b086      	sub	sp, #24
 8000408:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800040a:	f107 0308 	add.w	r3, r7, #8
 800040e:	2200      	movs	r2, #0
 8000410:	601a      	str	r2, [r3, #0]
 8000412:	605a      	str	r2, [r3, #4]
 8000414:	609a      	str	r2, [r3, #8]
 8000416:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000418:	4b17      	ldr	r3, [pc, #92]	@ (8000478 <MX_GPIO_Init+0x74>)
 800041a:	699b      	ldr	r3, [r3, #24]
 800041c:	4a16      	ldr	r2, [pc, #88]	@ (8000478 <MX_GPIO_Init+0x74>)
 800041e:	f043 0320 	orr.w	r3, r3, #32
 8000422:	6193      	str	r3, [r2, #24]
 8000424:	4b14      	ldr	r3, [pc, #80]	@ (8000478 <MX_GPIO_Init+0x74>)
 8000426:	699b      	ldr	r3, [r3, #24]
 8000428:	f003 0320 	and.w	r3, r3, #32
 800042c:	607b      	str	r3, [r7, #4]
 800042e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000430:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <MX_GPIO_Init+0x74>)
 8000432:	699b      	ldr	r3, [r3, #24]
 8000434:	4a10      	ldr	r2, [pc, #64]	@ (8000478 <MX_GPIO_Init+0x74>)
 8000436:	f043 0304 	orr.w	r3, r3, #4
 800043a:	6193      	str	r3, [r2, #24]
 800043c:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <MX_GPIO_Init+0x74>)
 800043e:	699b      	ldr	r3, [r3, #24]
 8000440:	f003 0304 	and.w	r3, r3, #4
 8000444:	603b      	str	r3, [r7, #0]
 8000446:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000448:	2200      	movs	r2, #0
 800044a:	2110      	movs	r1, #16
 800044c:	480b      	ldr	r0, [pc, #44]	@ (800047c <MX_GPIO_Init+0x78>)
 800044e:	f000 fc61 	bl	8000d14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000452:	2310      	movs	r3, #16
 8000454:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000456:	2301      	movs	r3, #1
 8000458:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045a:	2300      	movs	r3, #0
 800045c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800045e:	2303      	movs	r3, #3
 8000460:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000462:	f107 0308 	add.w	r3, r7, #8
 8000466:	4619      	mov	r1, r3
 8000468:	4804      	ldr	r0, [pc, #16]	@ (800047c <MX_GPIO_Init+0x78>)
 800046a:	f000 facf 	bl	8000a0c <HAL_GPIO_Init>

}
 800046e:	bf00      	nop
 8000470:	3718      	adds	r7, #24
 8000472:	46bd      	mov	sp, r7
 8000474:	bd80      	pop	{r7, pc}
 8000476:	bf00      	nop
 8000478:	40021000 	.word	0x40021000
 800047c:	40010800 	.word	0x40010800

08000480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000480:	b480      	push	{r7}
 8000482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000484:	b672      	cpsid	i
}
 8000486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000488:	bf00      	nop
 800048a:	e7fd      	b.n	8000488 <Error_Handler+0x8>

0800048c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800048c:	b480      	push	{r7}
 800048e:	b085      	sub	sp, #20
 8000490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000492:	4b15      	ldr	r3, [pc, #84]	@ (80004e8 <HAL_MspInit+0x5c>)
 8000494:	699b      	ldr	r3, [r3, #24]
 8000496:	4a14      	ldr	r2, [pc, #80]	@ (80004e8 <HAL_MspInit+0x5c>)
 8000498:	f043 0301 	orr.w	r3, r3, #1
 800049c:	6193      	str	r3, [r2, #24]
 800049e:	4b12      	ldr	r3, [pc, #72]	@ (80004e8 <HAL_MspInit+0x5c>)
 80004a0:	699b      	ldr	r3, [r3, #24]
 80004a2:	f003 0301 	and.w	r3, r3, #1
 80004a6:	60bb      	str	r3, [r7, #8]
 80004a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004aa:	4b0f      	ldr	r3, [pc, #60]	@ (80004e8 <HAL_MspInit+0x5c>)
 80004ac:	69db      	ldr	r3, [r3, #28]
 80004ae:	4a0e      	ldr	r2, [pc, #56]	@ (80004e8 <HAL_MspInit+0x5c>)
 80004b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80004b4:	61d3      	str	r3, [r2, #28]
 80004b6:	4b0c      	ldr	r3, [pc, #48]	@ (80004e8 <HAL_MspInit+0x5c>)
 80004b8:	69db      	ldr	r3, [r3, #28]
 80004ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80004be:	607b      	str	r3, [r7, #4]
 80004c0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80004c2:	4b0a      	ldr	r3, [pc, #40]	@ (80004ec <HAL_MspInit+0x60>)
 80004c4:	685b      	ldr	r3, [r3, #4]
 80004c6:	60fb      	str	r3, [r7, #12]
 80004c8:	68fb      	ldr	r3, [r7, #12]
 80004ca:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80004ce:	60fb      	str	r3, [r7, #12]
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	4a04      	ldr	r2, [pc, #16]	@ (80004ec <HAL_MspInit+0x60>)
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	3714      	adds	r7, #20
 80004e2:	46bd      	mov	sp, r7
 80004e4:	bc80      	pop	{r7}
 80004e6:	4770      	bx	lr
 80004e8:	40021000 	.word	0x40021000
 80004ec:	40010000 	.word	0x40010000

080004f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b088      	sub	sp, #32
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f8:	f107 0310 	add.w	r3, r7, #16
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
 8000500:	605a      	str	r2, [r3, #4]
 8000502:	609a      	str	r2, [r3, #8]
 8000504:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a1b      	ldr	r2, [pc, #108]	@ (8000578 <HAL_SPI_MspInit+0x88>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d12f      	bne.n	8000570 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000510:	4b1a      	ldr	r3, [pc, #104]	@ (800057c <HAL_SPI_MspInit+0x8c>)
 8000512:	699b      	ldr	r3, [r3, #24]
 8000514:	4a19      	ldr	r2, [pc, #100]	@ (800057c <HAL_SPI_MspInit+0x8c>)
 8000516:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800051a:	6193      	str	r3, [r2, #24]
 800051c:	4b17      	ldr	r3, [pc, #92]	@ (800057c <HAL_SPI_MspInit+0x8c>)
 800051e:	699b      	ldr	r3, [r3, #24]
 8000520:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000524:	60fb      	str	r3, [r7, #12]
 8000526:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000528:	4b14      	ldr	r3, [pc, #80]	@ (800057c <HAL_SPI_MspInit+0x8c>)
 800052a:	699b      	ldr	r3, [r3, #24]
 800052c:	4a13      	ldr	r2, [pc, #76]	@ (800057c <HAL_SPI_MspInit+0x8c>)
 800052e:	f043 0304 	orr.w	r3, r3, #4
 8000532:	6193      	str	r3, [r2, #24]
 8000534:	4b11      	ldr	r3, [pc, #68]	@ (800057c <HAL_SPI_MspInit+0x8c>)
 8000536:	699b      	ldr	r3, [r3, #24]
 8000538:	f003 0304 	and.w	r3, r3, #4
 800053c:	60bb      	str	r3, [r7, #8]
 800053e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000540:	23a0      	movs	r3, #160	@ 0xa0
 8000542:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000544:	2302      	movs	r3, #2
 8000546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000548:	2303      	movs	r3, #3
 800054a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054c:	f107 0310 	add.w	r3, r7, #16
 8000550:	4619      	mov	r1, r3
 8000552:	480b      	ldr	r0, [pc, #44]	@ (8000580 <HAL_SPI_MspInit+0x90>)
 8000554:	f000 fa5a 	bl	8000a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000558:	2340      	movs	r3, #64	@ 0x40
 800055a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800055c:	2300      	movs	r3, #0
 800055e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000560:	2300      	movs	r3, #0
 8000562:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000564:	f107 0310 	add.w	r3, r7, #16
 8000568:	4619      	mov	r1, r3
 800056a:	4805      	ldr	r0, [pc, #20]	@ (8000580 <HAL_SPI_MspInit+0x90>)
 800056c:	f000 fa4e 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000570:	bf00      	nop
 8000572:	3720      	adds	r7, #32
 8000574:	46bd      	mov	sp, r7
 8000576:	bd80      	pop	{r7, pc}
 8000578:	40013000 	.word	0x40013000
 800057c:	40021000 	.word	0x40021000
 8000580:	40010800 	.word	0x40010800

08000584 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0
 800058a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800058c:	f107 0310 	add.w	r3, r7, #16
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4a1c      	ldr	r2, [pc, #112]	@ (8000610 <HAL_UART_MspInit+0x8c>)
 80005a0:	4293      	cmp	r3, r2
 80005a2:	d131      	bne.n	8000608 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005a4:	4b1b      	ldr	r3, [pc, #108]	@ (8000614 <HAL_UART_MspInit+0x90>)
 80005a6:	699b      	ldr	r3, [r3, #24]
 80005a8:	4a1a      	ldr	r2, [pc, #104]	@ (8000614 <HAL_UART_MspInit+0x90>)
 80005aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ae:	6193      	str	r3, [r2, #24]
 80005b0:	4b18      	ldr	r3, [pc, #96]	@ (8000614 <HAL_UART_MspInit+0x90>)
 80005b2:	699b      	ldr	r3, [r3, #24]
 80005b4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005bc:	4b15      	ldr	r3, [pc, #84]	@ (8000614 <HAL_UART_MspInit+0x90>)
 80005be:	699b      	ldr	r3, [r3, #24]
 80005c0:	4a14      	ldr	r2, [pc, #80]	@ (8000614 <HAL_UART_MspInit+0x90>)
 80005c2:	f043 0304 	orr.w	r3, r3, #4
 80005c6:	6193      	str	r3, [r2, #24]
 80005c8:	4b12      	ldr	r3, [pc, #72]	@ (8000614 <HAL_UART_MspInit+0x90>)
 80005ca:	699b      	ldr	r3, [r3, #24]
 80005cc:	f003 0304 	and.w	r3, r3, #4
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005d4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80005d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005da:	2302      	movs	r3, #2
 80005dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005de:	2303      	movs	r3, #3
 80005e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e2:	f107 0310 	add.w	r3, r7, #16
 80005e6:	4619      	mov	r1, r3
 80005e8:	480b      	ldr	r0, [pc, #44]	@ (8000618 <HAL_UART_MspInit+0x94>)
 80005ea:	f000 fa0f 	bl	8000a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005f4:	2300      	movs	r3, #0
 80005f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f8:	2300      	movs	r3, #0
 80005fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fc:	f107 0310 	add.w	r3, r7, #16
 8000600:	4619      	mov	r1, r3
 8000602:	4805      	ldr	r0, [pc, #20]	@ (8000618 <HAL_UART_MspInit+0x94>)
 8000604:	f000 fa02 	bl	8000a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000608:	bf00      	nop
 800060a:	3720      	adds	r7, #32
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40013800 	.word	0x40013800
 8000614:	40021000 	.word	0x40021000
 8000618:	40010800 	.word	0x40010800

0800061c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800061c:	b480      	push	{r7}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000620:	bf00      	nop
 8000622:	e7fd      	b.n	8000620 <NMI_Handler+0x4>

08000624 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000628:	bf00      	nop
 800062a:	e7fd      	b.n	8000628 <HardFault_Handler+0x4>

0800062c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800062c:	b480      	push	{r7}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000630:	bf00      	nop
 8000632:	e7fd      	b.n	8000630 <MemManage_Handler+0x4>

08000634 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000638:	bf00      	nop
 800063a:	e7fd      	b.n	8000638 <BusFault_Handler+0x4>

0800063c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000640:	bf00      	nop
 8000642:	e7fd      	b.n	8000640 <UsageFault_Handler+0x4>

08000644 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000644:	b480      	push	{r7}
 8000646:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr

08000650 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000650:	b480      	push	{r7}
 8000652:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000654:	bf00      	nop
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr

0800065c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000660:	bf00      	nop
 8000662:	46bd      	mov	sp, r7
 8000664:	bc80      	pop	{r7}
 8000666:	4770      	bx	lr

08000668 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800066c:	f000 f8aa 	bl	80007c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000670:	bf00      	nop
 8000672:	bd80      	pop	{r7, pc}

08000674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800067c:	4a14      	ldr	r2, [pc, #80]	@ (80006d0 <_sbrk+0x5c>)
 800067e:	4b15      	ldr	r3, [pc, #84]	@ (80006d4 <_sbrk+0x60>)
 8000680:	1ad3      	subs	r3, r2, r3
 8000682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000684:	697b      	ldr	r3, [r7, #20]
 8000686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000688:	4b13      	ldr	r3, [pc, #76]	@ (80006d8 <_sbrk+0x64>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d102      	bne.n	8000696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000690:	4b11      	ldr	r3, [pc, #68]	@ (80006d8 <_sbrk+0x64>)
 8000692:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <_sbrk+0x68>)
 8000694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000696:	4b10      	ldr	r3, [pc, #64]	@ (80006d8 <_sbrk+0x64>)
 8000698:	681a      	ldr	r2, [r3, #0]
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	4413      	add	r3, r2
 800069e:	693a      	ldr	r2, [r7, #16]
 80006a0:	429a      	cmp	r2, r3
 80006a2:	d207      	bcs.n	80006b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80006a4:	f001 ff40 	bl	8002528 <__errno>
 80006a8:	4603      	mov	r3, r0
 80006aa:	220c      	movs	r2, #12
 80006ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80006ae:	f04f 33ff 	mov.w	r3, #4294967295
 80006b2:	e009      	b.n	80006c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80006b4:	4b08      	ldr	r3, [pc, #32]	@ (80006d8 <_sbrk+0x64>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80006ba:	4b07      	ldr	r3, [pc, #28]	@ (80006d8 <_sbrk+0x64>)
 80006bc:	681a      	ldr	r2, [r3, #0]
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	4413      	add	r3, r2
 80006c2:	4a05      	ldr	r2, [pc, #20]	@ (80006d8 <_sbrk+0x64>)
 80006c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80006c6:	68fb      	ldr	r3, [r7, #12]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3718      	adds	r7, #24
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20005000 	.word	0x20005000
 80006d4:	00000400 	.word	0x00000400
 80006d8:	200001a8 	.word	0x200001a8
 80006dc:	200002f8 	.word	0x200002f8

080006e0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006e4:	bf00      	nop
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80006ec:	f7ff fff8 	bl	80006e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006f0:	480b      	ldr	r0, [pc, #44]	@ (8000720 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80006f2:	490c      	ldr	r1, [pc, #48]	@ (8000724 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80006f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000728 <LoopFillZerobss+0x16>)
  movs r3, #0
 80006f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006f8:	e002      	b.n	8000700 <LoopCopyDataInit>

080006fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006fe:	3304      	adds	r3, #4

08000700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000704:	d3f9      	bcc.n	80006fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000706:	4a09      	ldr	r2, [pc, #36]	@ (800072c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000708:	4c09      	ldr	r4, [pc, #36]	@ (8000730 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800070a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800070c:	e001      	b.n	8000712 <LoopFillZerobss>

0800070e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800070e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000710:	3204      	adds	r2, #4

08000712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000714:	d3fb      	bcc.n	800070e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000716:	f001 ff0d 	bl	8002534 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800071a:	f7ff fdbd 	bl	8000298 <main>
  bx lr
 800071e:	4770      	bx	lr
  ldr r0, =_sdata
 8000720:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000724:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000728:	08002ed0 	.word	0x08002ed0
  ldr r2, =_sbss
 800072c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000730:	200002f8 	.word	0x200002f8

08000734 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000734:	e7fe      	b.n	8000734 <ADC1_2_IRQHandler>
	...

08000738 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800073c:	4b08      	ldr	r3, [pc, #32]	@ (8000760 <HAL_Init+0x28>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	4a07      	ldr	r2, [pc, #28]	@ (8000760 <HAL_Init+0x28>)
 8000742:	f043 0310 	orr.w	r3, r3, #16
 8000746:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000748:	2003      	movs	r0, #3
 800074a:	f000 f92b 	bl	80009a4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800074e:	200f      	movs	r0, #15
 8000750:	f000 f808 	bl	8000764 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000754:	f7ff fe9a 	bl	800048c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000758:	2300      	movs	r3, #0
}
 800075a:	4618      	mov	r0, r3
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	40022000 	.word	0x40022000

08000764 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b082      	sub	sp, #8
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800076c:	4b12      	ldr	r3, [pc, #72]	@ (80007b8 <HAL_InitTick+0x54>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b12      	ldr	r3, [pc, #72]	@ (80007bc <HAL_InitTick+0x58>)
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	4619      	mov	r1, r3
 8000776:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077a:	fbb3 f3f1 	udiv	r3, r3, r1
 800077e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000782:	4618      	mov	r0, r3
 8000784:	f000 f935 	bl	80009f2 <HAL_SYSTICK_Config>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800078e:	2301      	movs	r3, #1
 8000790:	e00e      	b.n	80007b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	2b0f      	cmp	r3, #15
 8000796:	d80a      	bhi.n	80007ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000798:	2200      	movs	r2, #0
 800079a:	6879      	ldr	r1, [r7, #4]
 800079c:	f04f 30ff 	mov.w	r0, #4294967295
 80007a0:	f000 f90b 	bl	80009ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007a4:	4a06      	ldr	r2, [pc, #24]	@ (80007c0 <HAL_InitTick+0x5c>)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80007aa:	2300      	movs	r3, #0
 80007ac:	e000      	b.n	80007b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007ae:	2301      	movs	r3, #1
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000000 	.word	0x20000000
 80007bc:	20000008 	.word	0x20000008
 80007c0:	20000004 	.word	0x20000004

080007c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80007c8:	4b05      	ldr	r3, [pc, #20]	@ (80007e0 <HAL_IncTick+0x1c>)
 80007ca:	781b      	ldrb	r3, [r3, #0]
 80007cc:	461a      	mov	r2, r3
 80007ce:	4b05      	ldr	r3, [pc, #20]	@ (80007e4 <HAL_IncTick+0x20>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4413      	add	r3, r2
 80007d4:	4a03      	ldr	r2, [pc, #12]	@ (80007e4 <HAL_IncTick+0x20>)
 80007d6:	6013      	str	r3, [r2, #0]
}
 80007d8:	bf00      	nop
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr
 80007e0:	20000008 	.word	0x20000008
 80007e4:	200001ac 	.word	0x200001ac

080007e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  return uwTick;
 80007ec:	4b02      	ldr	r3, [pc, #8]	@ (80007f8 <HAL_GetTick+0x10>)
 80007ee:	681b      	ldr	r3, [r3, #0]
}
 80007f0:	4618      	mov	r0, r3
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bc80      	pop	{r7}
 80007f6:	4770      	bx	lr
 80007f8:	200001ac 	.word	0x200001ac

080007fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000804:	f7ff fff0 	bl	80007e8 <HAL_GetTick>
 8000808:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000814:	d005      	beq.n	8000822 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000816:	4b0a      	ldr	r3, [pc, #40]	@ (8000840 <HAL_Delay+0x44>)
 8000818:	781b      	ldrb	r3, [r3, #0]
 800081a:	461a      	mov	r2, r3
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000822:	bf00      	nop
 8000824:	f7ff ffe0 	bl	80007e8 <HAL_GetTick>
 8000828:	4602      	mov	r2, r0
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	68fa      	ldr	r2, [r7, #12]
 8000830:	429a      	cmp	r2, r3
 8000832:	d8f7      	bhi.n	8000824 <HAL_Delay+0x28>
  {
  }
}
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	20000008 	.word	0x20000008

08000844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f003 0307 	and.w	r3, r3, #7
 8000852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000856:	68db      	ldr	r3, [r3, #12]
 8000858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800085a:	68ba      	ldr	r2, [r7, #8]
 800085c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000860:	4013      	ands	r3, r2
 8000862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800086c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000876:	4a04      	ldr	r2, [pc, #16]	@ (8000888 <__NVIC_SetPriorityGrouping+0x44>)
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	60d3      	str	r3, [r2, #12]
}
 800087c:	bf00      	nop
 800087e:	3714      	adds	r7, #20
 8000880:	46bd      	mov	sp, r7
 8000882:	bc80      	pop	{r7}
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	e000ed00 	.word	0xe000ed00

0800088c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000890:	4b04      	ldr	r3, [pc, #16]	@ (80008a4 <__NVIC_GetPriorityGrouping+0x18>)
 8000892:	68db      	ldr	r3, [r3, #12]
 8000894:	0a1b      	lsrs	r3, r3, #8
 8000896:	f003 0307 	and.w	r3, r3, #7
}
 800089a:	4618      	mov	r0, r3
 800089c:	46bd      	mov	sp, r7
 800089e:	bc80      	pop	{r7}
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008a8:	b480      	push	{r7}
 80008aa:	b083      	sub	sp, #12
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	4603      	mov	r3, r0
 80008b0:	6039      	str	r1, [r7, #0]
 80008b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	db0a      	blt.n	80008d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	b2da      	uxtb	r2, r3
 80008c0:	490c      	ldr	r1, [pc, #48]	@ (80008f4 <__NVIC_SetPriority+0x4c>)
 80008c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c6:	0112      	lsls	r2, r2, #4
 80008c8:	b2d2      	uxtb	r2, r2
 80008ca:	440b      	add	r3, r1
 80008cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80008d0:	e00a      	b.n	80008e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	b2da      	uxtb	r2, r3
 80008d6:	4908      	ldr	r1, [pc, #32]	@ (80008f8 <__NVIC_SetPriority+0x50>)
 80008d8:	79fb      	ldrb	r3, [r7, #7]
 80008da:	f003 030f 	and.w	r3, r3, #15
 80008de:	3b04      	subs	r3, #4
 80008e0:	0112      	lsls	r2, r2, #4
 80008e2:	b2d2      	uxtb	r2, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	761a      	strb	r2, [r3, #24]
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bc80      	pop	{r7}
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop
 80008f4:	e000e100 	.word	0xe000e100
 80008f8:	e000ed00 	.word	0xe000ed00

080008fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008fc:	b480      	push	{r7}
 80008fe:	b089      	sub	sp, #36	@ 0x24
 8000900:	af00      	add	r7, sp, #0
 8000902:	60f8      	str	r0, [r7, #12]
 8000904:	60b9      	str	r1, [r7, #8]
 8000906:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000910:	69fb      	ldr	r3, [r7, #28]
 8000912:	f1c3 0307 	rsb	r3, r3, #7
 8000916:	2b04      	cmp	r3, #4
 8000918:	bf28      	it	cs
 800091a:	2304      	movcs	r3, #4
 800091c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800091e:	69fb      	ldr	r3, [r7, #28]
 8000920:	3304      	adds	r3, #4
 8000922:	2b06      	cmp	r3, #6
 8000924:	d902      	bls.n	800092c <NVIC_EncodePriority+0x30>
 8000926:	69fb      	ldr	r3, [r7, #28]
 8000928:	3b03      	subs	r3, #3
 800092a:	e000      	b.n	800092e <NVIC_EncodePriority+0x32>
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000930:	f04f 32ff 	mov.w	r2, #4294967295
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43da      	mvns	r2, r3
 800093c:	68bb      	ldr	r3, [r7, #8]
 800093e:	401a      	ands	r2, r3
 8000940:	697b      	ldr	r3, [r7, #20]
 8000942:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000944:	f04f 31ff 	mov.w	r1, #4294967295
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	43d9      	mvns	r1, r3
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000954:	4313      	orrs	r3, r2
         );
}
 8000956:	4618      	mov	r0, r3
 8000958:	3724      	adds	r7, #36	@ 0x24
 800095a:	46bd      	mov	sp, r7
 800095c:	bc80      	pop	{r7}
 800095e:	4770      	bx	lr

08000960 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	3b01      	subs	r3, #1
 800096c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000970:	d301      	bcc.n	8000976 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000972:	2301      	movs	r3, #1
 8000974:	e00f      	b.n	8000996 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000976:	4a0a      	ldr	r2, [pc, #40]	@ (80009a0 <SysTick_Config+0x40>)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3b01      	subs	r3, #1
 800097c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800097e:	210f      	movs	r1, #15
 8000980:	f04f 30ff 	mov.w	r0, #4294967295
 8000984:	f7ff ff90 	bl	80008a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000988:	4b05      	ldr	r3, [pc, #20]	@ (80009a0 <SysTick_Config+0x40>)
 800098a:	2200      	movs	r2, #0
 800098c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800098e:	4b04      	ldr	r3, [pc, #16]	@ (80009a0 <SysTick_Config+0x40>)
 8000990:	2207      	movs	r2, #7
 8000992:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000994:	2300      	movs	r3, #0
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	e000e010 	.word	0xe000e010

080009a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009ac:	6878      	ldr	r0, [r7, #4]
 80009ae:	f7ff ff49 	bl	8000844 <__NVIC_SetPriorityGrouping>
}
 80009b2:	bf00      	nop
 80009b4:	3708      	adds	r7, #8
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}

080009ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80009ba:	b580      	push	{r7, lr}
 80009bc:	b086      	sub	sp, #24
 80009be:	af00      	add	r7, sp, #0
 80009c0:	4603      	mov	r3, r0
 80009c2:	60b9      	str	r1, [r7, #8]
 80009c4:	607a      	str	r2, [r7, #4]
 80009c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80009c8:	2300      	movs	r3, #0
 80009ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80009cc:	f7ff ff5e 	bl	800088c <__NVIC_GetPriorityGrouping>
 80009d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80009d2:	687a      	ldr	r2, [r7, #4]
 80009d4:	68b9      	ldr	r1, [r7, #8]
 80009d6:	6978      	ldr	r0, [r7, #20]
 80009d8:	f7ff ff90 	bl	80008fc <NVIC_EncodePriority>
 80009dc:	4602      	mov	r2, r0
 80009de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80009e2:	4611      	mov	r1, r2
 80009e4:	4618      	mov	r0, r3
 80009e6:	f7ff ff5f 	bl	80008a8 <__NVIC_SetPriority>
}
 80009ea:	bf00      	nop
 80009ec:	3718      	adds	r7, #24
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}

080009f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80009f2:	b580      	push	{r7, lr}
 80009f4:	b082      	sub	sp, #8
 80009f6:	af00      	add	r7, sp, #0
 80009f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80009fa:	6878      	ldr	r0, [r7, #4]
 80009fc:	f7ff ffb0 	bl	8000960 <SysTick_Config>
 8000a00:	4603      	mov	r3, r0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
	...

08000a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b08b      	sub	sp, #44	@ 0x2c
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
 8000a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a1e:	e169      	b.n	8000cf4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a20:	2201      	movs	r2, #1
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	fa02 f303 	lsl.w	r3, r2, r3
 8000a28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	69fa      	ldr	r2, [r7, #28]
 8000a30:	4013      	ands	r3, r2
 8000a32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a34:	69ba      	ldr	r2, [r7, #24]
 8000a36:	69fb      	ldr	r3, [r7, #28]
 8000a38:	429a      	cmp	r2, r3
 8000a3a:	f040 8158 	bne.w	8000cee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a3e:	683b      	ldr	r3, [r7, #0]
 8000a40:	685b      	ldr	r3, [r3, #4]
 8000a42:	4a9a      	ldr	r2, [pc, #616]	@ (8000cac <HAL_GPIO_Init+0x2a0>)
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d05e      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a48:	4a98      	ldr	r2, [pc, #608]	@ (8000cac <HAL_GPIO_Init+0x2a0>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d875      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a4e:	4a98      	ldr	r2, [pc, #608]	@ (8000cb0 <HAL_GPIO_Init+0x2a4>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d058      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a54:	4a96      	ldr	r2, [pc, #600]	@ (8000cb0 <HAL_GPIO_Init+0x2a4>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d86f      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a5a:	4a96      	ldr	r2, [pc, #600]	@ (8000cb4 <HAL_GPIO_Init+0x2a8>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d052      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a60:	4a94      	ldr	r2, [pc, #592]	@ (8000cb4 <HAL_GPIO_Init+0x2a8>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d869      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a66:	4a94      	ldr	r2, [pc, #592]	@ (8000cb8 <HAL_GPIO_Init+0x2ac>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d04c      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a6c:	4a92      	ldr	r2, [pc, #584]	@ (8000cb8 <HAL_GPIO_Init+0x2ac>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d863      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a72:	4a92      	ldr	r2, [pc, #584]	@ (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000a74:	4293      	cmp	r3, r2
 8000a76:	d046      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
 8000a78:	4a90      	ldr	r2, [pc, #576]	@ (8000cbc <HAL_GPIO_Init+0x2b0>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d85d      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a7e:	2b12      	cmp	r3, #18
 8000a80:	d82a      	bhi.n	8000ad8 <HAL_GPIO_Init+0xcc>
 8000a82:	2b12      	cmp	r3, #18
 8000a84:	d859      	bhi.n	8000b3a <HAL_GPIO_Init+0x12e>
 8000a86:	a201      	add	r2, pc, #4	@ (adr r2, 8000a8c <HAL_GPIO_Init+0x80>)
 8000a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a8c:	08000b07 	.word	0x08000b07
 8000a90:	08000ae1 	.word	0x08000ae1
 8000a94:	08000af3 	.word	0x08000af3
 8000a98:	08000b35 	.word	0x08000b35
 8000a9c:	08000b3b 	.word	0x08000b3b
 8000aa0:	08000b3b 	.word	0x08000b3b
 8000aa4:	08000b3b 	.word	0x08000b3b
 8000aa8:	08000b3b 	.word	0x08000b3b
 8000aac:	08000b3b 	.word	0x08000b3b
 8000ab0:	08000b3b 	.word	0x08000b3b
 8000ab4:	08000b3b 	.word	0x08000b3b
 8000ab8:	08000b3b 	.word	0x08000b3b
 8000abc:	08000b3b 	.word	0x08000b3b
 8000ac0:	08000b3b 	.word	0x08000b3b
 8000ac4:	08000b3b 	.word	0x08000b3b
 8000ac8:	08000b3b 	.word	0x08000b3b
 8000acc:	08000b3b 	.word	0x08000b3b
 8000ad0:	08000ae9 	.word	0x08000ae9
 8000ad4:	08000afd 	.word	0x08000afd
 8000ad8:	4a79      	ldr	r2, [pc, #484]	@ (8000cc0 <HAL_GPIO_Init+0x2b4>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d013      	beq.n	8000b06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ade:	e02c      	b.n	8000b3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	68db      	ldr	r3, [r3, #12]
 8000ae4:	623b      	str	r3, [r7, #32]
          break;
 8000ae6:	e029      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000ae8:	683b      	ldr	r3, [r7, #0]
 8000aea:	68db      	ldr	r3, [r3, #12]
 8000aec:	3304      	adds	r3, #4
 8000aee:	623b      	str	r3, [r7, #32]
          break;
 8000af0:	e024      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	68db      	ldr	r3, [r3, #12]
 8000af6:	3308      	adds	r3, #8
 8000af8:	623b      	str	r3, [r7, #32]
          break;
 8000afa:	e01f      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	330c      	adds	r3, #12
 8000b02:	623b      	str	r3, [r7, #32]
          break;
 8000b04:	e01a      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d102      	bne.n	8000b14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e013      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	689b      	ldr	r3, [r3, #8]
 8000b18:	2b01      	cmp	r3, #1
 8000b1a:	d105      	bne.n	8000b28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b1c:	2308      	movs	r3, #8
 8000b1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	69fa      	ldr	r2, [r7, #28]
 8000b24:	611a      	str	r2, [r3, #16]
          break;
 8000b26:	e009      	b.n	8000b3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	69fa      	ldr	r2, [r7, #28]
 8000b30:	615a      	str	r2, [r3, #20]
          break;
 8000b32:	e003      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000b34:	2300      	movs	r3, #0
 8000b36:	623b      	str	r3, [r7, #32]
          break;
 8000b38:	e000      	b.n	8000b3c <HAL_GPIO_Init+0x130>
          break;
 8000b3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000b3c:	69bb      	ldr	r3, [r7, #24]
 8000b3e:	2bff      	cmp	r3, #255	@ 0xff
 8000b40:	d801      	bhi.n	8000b46 <HAL_GPIO_Init+0x13a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	e001      	b.n	8000b4a <HAL_GPIO_Init+0x13e>
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	2bff      	cmp	r3, #255	@ 0xff
 8000b50:	d802      	bhi.n	8000b58 <HAL_GPIO_Init+0x14c>
 8000b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b54:	009b      	lsls	r3, r3, #2
 8000b56:	e002      	b.n	8000b5e <HAL_GPIO_Init+0x152>
 8000b58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5a:	3b08      	subs	r3, #8
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	681a      	ldr	r2, [r3, #0]
 8000b64:	210f      	movs	r1, #15
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6c:	43db      	mvns	r3, r3
 8000b6e:	401a      	ands	r2, r3
 8000b70:	6a39      	ldr	r1, [r7, #32]
 8000b72:	693b      	ldr	r3, [r7, #16]
 8000b74:	fa01 f303 	lsl.w	r3, r1, r3
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	685b      	ldr	r3, [r3, #4]
 8000b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 80b1 	beq.w	8000cee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000b8c:	4b4d      	ldr	r3, [pc, #308]	@ (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b8e:	699b      	ldr	r3, [r3, #24]
 8000b90:	4a4c      	ldr	r2, [pc, #304]	@ (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b92:	f043 0301 	orr.w	r3, r3, #1
 8000b96:	6193      	str	r3, [r2, #24]
 8000b98:	4b4a      	ldr	r3, [pc, #296]	@ (8000cc4 <HAL_GPIO_Init+0x2b8>)
 8000b9a:	699b      	ldr	r3, [r3, #24]
 8000b9c:	f003 0301 	and.w	r3, r3, #1
 8000ba0:	60bb      	str	r3, [r7, #8]
 8000ba2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000ba4:	4a48      	ldr	r2, [pc, #288]	@ (8000cc8 <HAL_GPIO_Init+0x2bc>)
 8000ba6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ba8:	089b      	lsrs	r3, r3, #2
 8000baa:	3302      	adds	r3, #2
 8000bac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bb4:	f003 0303 	and.w	r3, r3, #3
 8000bb8:	009b      	lsls	r3, r3, #2
 8000bba:	220f      	movs	r2, #15
 8000bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc0:	43db      	mvns	r3, r3
 8000bc2:	68fa      	ldr	r2, [r7, #12]
 8000bc4:	4013      	ands	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	4a40      	ldr	r2, [pc, #256]	@ (8000ccc <HAL_GPIO_Init+0x2c0>)
 8000bcc:	4293      	cmp	r3, r2
 8000bce:	d013      	beq.n	8000bf8 <HAL_GPIO_Init+0x1ec>
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a3f      	ldr	r2, [pc, #252]	@ (8000cd0 <HAL_GPIO_Init+0x2c4>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d00d      	beq.n	8000bf4 <HAL_GPIO_Init+0x1e8>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a3e      	ldr	r2, [pc, #248]	@ (8000cd4 <HAL_GPIO_Init+0x2c8>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d007      	beq.n	8000bf0 <HAL_GPIO_Init+0x1e4>
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	4a3d      	ldr	r2, [pc, #244]	@ (8000cd8 <HAL_GPIO_Init+0x2cc>)
 8000be4:	4293      	cmp	r3, r2
 8000be6:	d101      	bne.n	8000bec <HAL_GPIO_Init+0x1e0>
 8000be8:	2303      	movs	r3, #3
 8000bea:	e006      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bec:	2304      	movs	r3, #4
 8000bee:	e004      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	e002      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	e000      	b.n	8000bfa <HAL_GPIO_Init+0x1ee>
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bfc:	f002 0203 	and.w	r2, r2, #3
 8000c00:	0092      	lsls	r2, r2, #2
 8000c02:	4093      	lsls	r3, r2
 8000c04:	68fa      	ldr	r2, [r7, #12]
 8000c06:	4313      	orrs	r3, r2
 8000c08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000c0a:	492f      	ldr	r1, [pc, #188]	@ (8000cc8 <HAL_GPIO_Init+0x2bc>)
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c0e:	089b      	lsrs	r3, r3, #2
 8000c10:	3302      	adds	r3, #2
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	685b      	ldr	r3, [r3, #4]
 8000c1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d006      	beq.n	8000c32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000c24:	4b2d      	ldr	r3, [pc, #180]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c26:	689a      	ldr	r2, [r3, #8]
 8000c28:	492c      	ldr	r1, [pc, #176]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	4313      	orrs	r3, r2
 8000c2e:	608b      	str	r3, [r1, #8]
 8000c30:	e006      	b.n	8000c40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000c32:	4b2a      	ldr	r3, [pc, #168]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c34:	689a      	ldr	r2, [r3, #8]
 8000c36:	69bb      	ldr	r3, [r7, #24]
 8000c38:	43db      	mvns	r3, r3
 8000c3a:	4928      	ldr	r1, [pc, #160]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c3c:	4013      	ands	r3, r2
 8000c3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d006      	beq.n	8000c5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000c4c:	4b23      	ldr	r3, [pc, #140]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	4922      	ldr	r1, [pc, #136]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	4313      	orrs	r3, r2
 8000c56:	60cb      	str	r3, [r1, #12]
 8000c58:	e006      	b.n	8000c68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000c5a:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c5c:	68da      	ldr	r2, [r3, #12]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	43db      	mvns	r3, r3
 8000c62:	491e      	ldr	r1, [pc, #120]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c64:	4013      	ands	r3, r2
 8000c66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c68:	683b      	ldr	r3, [r7, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d006      	beq.n	8000c82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000c74:	4b19      	ldr	r3, [pc, #100]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c76:	685a      	ldr	r2, [r3, #4]
 8000c78:	4918      	ldr	r1, [pc, #96]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c7a:	69bb      	ldr	r3, [r7, #24]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	604b      	str	r3, [r1, #4]
 8000c80:	e006      	b.n	8000c90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000c82:	4b16      	ldr	r3, [pc, #88]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c84:	685a      	ldr	r2, [r3, #4]
 8000c86:	69bb      	ldr	r3, [r7, #24]
 8000c88:	43db      	mvns	r3, r3
 8000c8a:	4914      	ldr	r1, [pc, #80]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d021      	beq.n	8000ce0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	490e      	ldr	r1, [pc, #56]	@ (8000cdc <HAL_GPIO_Init+0x2d0>)
 8000ca2:	69bb      	ldr	r3, [r7, #24]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	600b      	str	r3, [r1, #0]
 8000ca8:	e021      	b.n	8000cee <HAL_GPIO_Init+0x2e2>
 8000caa:	bf00      	nop
 8000cac:	10320000 	.word	0x10320000
 8000cb0:	10310000 	.word	0x10310000
 8000cb4:	10220000 	.word	0x10220000
 8000cb8:	10210000 	.word	0x10210000
 8000cbc:	10120000 	.word	0x10120000
 8000cc0:	10110000 	.word	0x10110000
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	40010000 	.word	0x40010000
 8000ccc:	40010800 	.word	0x40010800
 8000cd0:	40010c00 	.word	0x40010c00
 8000cd4:	40011000 	.word	0x40011000
 8000cd8:	40011400 	.word	0x40011400
 8000cdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000ce0:	4b0b      	ldr	r3, [pc, #44]	@ (8000d10 <HAL_GPIO_Init+0x304>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	69bb      	ldr	r3, [r7, #24]
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4909      	ldr	r1, [pc, #36]	@ (8000d10 <HAL_GPIO_Init+0x304>)
 8000cea:	4013      	ands	r3, r2
 8000cec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000cfa:	fa22 f303 	lsr.w	r3, r2, r3
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	f47f ae8e 	bne.w	8000a20 <HAL_GPIO_Init+0x14>
  }
}
 8000d04:	bf00      	nop
 8000d06:	bf00      	nop
 8000d08:	372c      	adds	r7, #44	@ 0x2c
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	bc80      	pop	{r7}
 8000d0e:	4770      	bx	lr
 8000d10:	40010400 	.word	0x40010400

08000d14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	6078      	str	r0, [r7, #4]
 8000d1c:	460b      	mov	r3, r1
 8000d1e:	807b      	strh	r3, [r7, #2]
 8000d20:	4613      	mov	r3, r2
 8000d22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d24:	787b      	ldrb	r3, [r7, #1]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d003      	beq.n	8000d32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000d2a:	887a      	ldrh	r2, [r7, #2]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000d30:	e003      	b.n	8000d3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000d32:	887b      	ldrh	r3, [r7, #2]
 8000d34:	041a      	lsls	r2, r3, #16
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	611a      	str	r2, [r3, #16]
}
 8000d3a:	bf00      	nop
 8000d3c:	370c      	adds	r7, #12
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bc80      	pop	{r7}
 8000d42:	4770      	bx	lr

08000d44 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d101      	bne.n	8000d56 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e272      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	f000 8087 	beq.w	8000e72 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d64:	4b92      	ldr	r3, [pc, #584]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f003 030c 	and.w	r3, r3, #12
 8000d6c:	2b04      	cmp	r3, #4
 8000d6e:	d00c      	beq.n	8000d8a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d70:	4b8f      	ldr	r3, [pc, #572]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 030c 	and.w	r3, r3, #12
 8000d78:	2b08      	cmp	r3, #8
 8000d7a:	d112      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
 8000d7c:	4b8c      	ldr	r3, [pc, #560]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000d84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000d88:	d10b      	bne.n	8000da2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d8a:	4b89      	ldr	r3, [pc, #548]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d06c      	beq.n	8000e70 <HAL_RCC_OscConfig+0x12c>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d168      	bne.n	8000e70 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e24c      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000daa:	d106      	bne.n	8000dba <HAL_RCC_OscConfig+0x76>
 8000dac:	4b80      	ldr	r3, [pc, #512]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a7f      	ldr	r2, [pc, #508]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000db2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000db6:	6013      	str	r3, [r2, #0]
 8000db8:	e02e      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685b      	ldr	r3, [r3, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d10c      	bne.n	8000ddc <HAL_RCC_OscConfig+0x98>
 8000dc2:	4b7b      	ldr	r3, [pc, #492]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	4a7a      	ldr	r2, [pc, #488]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dc8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	4b78      	ldr	r3, [pc, #480]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	4a77      	ldr	r2, [pc, #476]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dd4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000dd8:	6013      	str	r3, [r2, #0]
 8000dda:	e01d      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0xbc>
 8000de6:	4b72      	ldr	r3, [pc, #456]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a71      	ldr	r2, [pc, #452]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000dec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b6f      	ldr	r3, [pc, #444]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a6e      	ldr	r2, [pc, #440]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000df8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e00b      	b.n	8000e18 <HAL_RCC_OscConfig+0xd4>
 8000e00:	4b6b      	ldr	r3, [pc, #428]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a6a      	ldr	r2, [pc, #424]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e06:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000e0a:	6013      	str	r3, [r2, #0]
 8000e0c:	4b68      	ldr	r3, [pc, #416]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a67      	ldr	r2, [pc, #412]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e16:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d013      	beq.n	8000e48 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e20:	f7ff fce2 	bl	80007e8 <HAL_GetTick>
 8000e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e26:	e008      	b.n	8000e3a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e28:	f7ff fcde 	bl	80007e8 <HAL_GetTick>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	693b      	ldr	r3, [r7, #16]
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b64      	cmp	r3, #100	@ 0x64
 8000e34:	d901      	bls.n	8000e3a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e200      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f0      	beq.n	8000e28 <HAL_RCC_OscConfig+0xe4>
 8000e46:	e014      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e48:	f7ff fcce 	bl	80007e8 <HAL_GetTick>
 8000e4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e4e:	e008      	b.n	8000e62 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000e50:	f7ff fcca 	bl	80007e8 <HAL_GetTick>
 8000e54:	4602      	mov	r2, r0
 8000e56:	693b      	ldr	r3, [r7, #16]
 8000e58:	1ad3      	subs	r3, r2, r3
 8000e5a:	2b64      	cmp	r3, #100	@ 0x64
 8000e5c:	d901      	bls.n	8000e62 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8000e5e:	2303      	movs	r3, #3
 8000e60:	e1ec      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000e62:	4b53      	ldr	r3, [pc, #332]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d1f0      	bne.n	8000e50 <HAL_RCC_OscConfig+0x10c>
 8000e6e:	e000      	b.n	8000e72 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 0302 	and.w	r3, r3, #2
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d063      	beq.n	8000f46 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e7e:	4b4c      	ldr	r3, [pc, #304]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f003 030c 	and.w	r3, r3, #12
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d00b      	beq.n	8000ea2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000e8a:	4b49      	ldr	r3, [pc, #292]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e8c:	685b      	ldr	r3, [r3, #4]
 8000e8e:	f003 030c 	and.w	r3, r3, #12
 8000e92:	2b08      	cmp	r3, #8
 8000e94:	d11c      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
 8000e96:	4b46      	ldr	r3, [pc, #280]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d116      	bne.n	8000ed0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ea2:	4b43      	ldr	r3, [pc, #268]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	f003 0302 	and.w	r3, r3, #2
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d005      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	691b      	ldr	r3, [r3, #16]
 8000eb2:	2b01      	cmp	r3, #1
 8000eb4:	d001      	beq.n	8000eba <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8000eb6:	2301      	movs	r3, #1
 8000eb8:	e1c0      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000eba:	4b3d      	ldr	r3, [pc, #244]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	695b      	ldr	r3, [r3, #20]
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	4939      	ldr	r1, [pc, #228]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ece:	e03a      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d020      	beq.n	8000f1a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ed8:	4b36      	ldr	r3, [pc, #216]	@ (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000eda:	2201      	movs	r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ede:	f7ff fc83 	bl	80007e8 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ee4:	e008      	b.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000ee6:	f7ff fc7f 	bl	80007e8 <HAL_GetTick>
 8000eea:	4602      	mov	r2, r0
 8000eec:	693b      	ldr	r3, [r7, #16]
 8000eee:	1ad3      	subs	r3, r2, r3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d901      	bls.n	8000ef8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000ef4:	2303      	movs	r3, #3
 8000ef6:	e1a1      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ef8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f003 0302 	and.w	r3, r3, #2
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d0f0      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f04:	4b2a      	ldr	r3, [pc, #168]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	695b      	ldr	r3, [r3, #20]
 8000f10:	00db      	lsls	r3, r3, #3
 8000f12:	4927      	ldr	r1, [pc, #156]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f14:	4313      	orrs	r3, r2
 8000f16:	600b      	str	r3, [r1, #0]
 8000f18:	e015      	b.n	8000f46 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000f1a:	4b26      	ldr	r3, [pc, #152]	@ (8000fb4 <HAL_RCC_OscConfig+0x270>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f20:	f7ff fc62 	bl	80007e8 <HAL_GetTick>
 8000f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f26:	e008      	b.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000f28:	f7ff fc5e 	bl	80007e8 <HAL_GetTick>
 8000f2c:	4602      	mov	r2, r0
 8000f2e:	693b      	ldr	r3, [r7, #16]
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d901      	bls.n	8000f3a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8000f36:	2303      	movs	r3, #3
 8000f38:	e180      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000f3a:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d1f0      	bne.n	8000f28 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 0308 	and.w	r3, r3, #8
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d03a      	beq.n	8000fc8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d019      	beq.n	8000f8e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f5c:	2201      	movs	r2, #1
 8000f5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f60:	f7ff fc42 	bl	80007e8 <HAL_GetTick>
 8000f64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f66:	e008      	b.n	8000f7a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f68:	f7ff fc3e 	bl	80007e8 <HAL_GetTick>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	693b      	ldr	r3, [r7, #16]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	2b02      	cmp	r3, #2
 8000f74:	d901      	bls.n	8000f7a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8000f76:	2303      	movs	r3, #3
 8000f78:	e160      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000fb0 <HAL_RCC_OscConfig+0x26c>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000f7e:	f003 0302 	and.w	r3, r3, #2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d0f0      	beq.n	8000f68 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000f86:	2001      	movs	r0, #1
 8000f88:	f000 face 	bl	8001528 <RCC_Delay>
 8000f8c:	e01c      	b.n	8000fc8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000fb8 <HAL_RCC_OscConfig+0x274>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f94:	f7ff fc28 	bl	80007e8 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f9a:	e00f      	b.n	8000fbc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000f9c:	f7ff fc24 	bl	80007e8 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d908      	bls.n	8000fbc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e146      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
 8000fae:	bf00      	nop
 8000fb0:	40021000 	.word	0x40021000
 8000fb4:	42420000 	.word	0x42420000
 8000fb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000fbc:	4b92      	ldr	r3, [pc, #584]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fc0:	f003 0302 	and.w	r3, r3, #2
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d1e9      	bne.n	8000f9c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	f000 80a6 	beq.w	8001122 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fda:	4b8b      	ldr	r3, [pc, #556]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fdc:	69db      	ldr	r3, [r3, #28]
 8000fde:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d10d      	bne.n	8001002 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fe6:	4b88      	ldr	r3, [pc, #544]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fe8:	69db      	ldr	r3, [r3, #28]
 8000fea:	4a87      	ldr	r2, [pc, #540]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ff0:	61d3      	str	r3, [r2, #28]
 8000ff2:	4b85      	ldr	r3, [pc, #532]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8000ff4:	69db      	ldr	r3, [r3, #28]
 8000ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000ffe:	2301      	movs	r3, #1
 8001000:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	4b82      	ldr	r3, [pc, #520]	@ (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800100a:	2b00      	cmp	r3, #0
 800100c:	d118      	bne.n	8001040 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800100e:	4b7f      	ldr	r3, [pc, #508]	@ (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	4a7e      	ldr	r2, [pc, #504]	@ (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001018:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800101a:	f7ff fbe5 	bl	80007e8 <HAL_GetTick>
 800101e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001020:	e008      	b.n	8001034 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001022:	f7ff fbe1 	bl	80007e8 <HAL_GetTick>
 8001026:	4602      	mov	r2, r0
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	1ad3      	subs	r3, r2, r3
 800102c:	2b64      	cmp	r3, #100	@ 0x64
 800102e:	d901      	bls.n	8001034 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001030:	2303      	movs	r3, #3
 8001032:	e103      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001034:	4b75      	ldr	r3, [pc, #468]	@ (800120c <HAL_RCC_OscConfig+0x4c8>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800103c:	2b00      	cmp	r3, #0
 800103e:	d0f0      	beq.n	8001022 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	2b01      	cmp	r3, #1
 8001046:	d106      	bne.n	8001056 <HAL_RCC_OscConfig+0x312>
 8001048:	4b6f      	ldr	r3, [pc, #444]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4a6e      	ldr	r2, [pc, #440]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	6213      	str	r3, [r2, #32]
 8001054:	e02d      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <HAL_RCC_OscConfig+0x334>
 800105e:	4b6a      	ldr	r3, [pc, #424]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001060:	6a1b      	ldr	r3, [r3, #32]
 8001062:	4a69      	ldr	r2, [pc, #420]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001064:	f023 0301 	bic.w	r3, r3, #1
 8001068:	6213      	str	r3, [r2, #32]
 800106a:	4b67      	ldr	r3, [pc, #412]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a66      	ldr	r2, [pc, #408]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001070:	f023 0304 	bic.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	e01c      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b05      	cmp	r3, #5
 800107e:	d10c      	bne.n	800109a <HAL_RCC_OscConfig+0x356>
 8001080:	4b61      	ldr	r3, [pc, #388]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001082:	6a1b      	ldr	r3, [r3, #32]
 8001084:	4a60      	ldr	r2, [pc, #384]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001086:	f043 0304 	orr.w	r3, r3, #4
 800108a:	6213      	str	r3, [r2, #32]
 800108c:	4b5e      	ldr	r3, [pc, #376]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800108e:	6a1b      	ldr	r3, [r3, #32]
 8001090:	4a5d      	ldr	r2, [pc, #372]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6213      	str	r3, [r2, #32]
 8001098:	e00b      	b.n	80010b2 <HAL_RCC_OscConfig+0x36e>
 800109a:	4b5b      	ldr	r3, [pc, #364]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800109c:	6a1b      	ldr	r3, [r3, #32]
 800109e:	4a5a      	ldr	r2, [pc, #360]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010a0:	f023 0301 	bic.w	r3, r3, #1
 80010a4:	6213      	str	r3, [r2, #32]
 80010a6:	4b58      	ldr	r3, [pc, #352]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010a8:	6a1b      	ldr	r3, [r3, #32]
 80010aa:	4a57      	ldr	r2, [pc, #348]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010ac:	f023 0304 	bic.w	r3, r3, #4
 80010b0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d015      	beq.n	80010e6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010ba:	f7ff fb95 	bl	80007e8 <HAL_GetTick>
 80010be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010c0:	e00a      	b.n	80010d8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010c2:	f7ff fb91 	bl	80007e8 <HAL_GetTick>
 80010c6:	4602      	mov	r2, r0
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	1ad3      	subs	r3, r2, r3
 80010cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d901      	bls.n	80010d8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80010d4:	2303      	movs	r3, #3
 80010d6:	e0b1      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010d8:	4b4b      	ldr	r3, [pc, #300]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80010da:	6a1b      	ldr	r3, [r3, #32]
 80010dc:	f003 0302 	and.w	r3, r3, #2
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d0ee      	beq.n	80010c2 <HAL_RCC_OscConfig+0x37e>
 80010e4:	e014      	b.n	8001110 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010e6:	f7ff fb7f 	bl	80007e8 <HAL_GetTick>
 80010ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80010ec:	e00a      	b.n	8001104 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010ee:	f7ff fb7b 	bl	80007e8 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d901      	bls.n	8001104 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001100:	2303      	movs	r3, #3
 8001102:	e09b      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001104:	4b40      	ldr	r3, [pc, #256]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1ee      	bne.n	80010ee <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001110:	7dfb      	ldrb	r3, [r7, #23]
 8001112:	2b01      	cmp	r3, #1
 8001114:	d105      	bne.n	8001122 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001116:	4b3c      	ldr	r3, [pc, #240]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	4a3b      	ldr	r2, [pc, #236]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800111c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001120:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	69db      	ldr	r3, [r3, #28]
 8001126:	2b00      	cmp	r3, #0
 8001128:	f000 8087 	beq.w	800123a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800112c:	4b36      	ldr	r3, [pc, #216]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f003 030c 	and.w	r3, r3, #12
 8001134:	2b08      	cmp	r3, #8
 8001136:	d061      	beq.n	80011fc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	69db      	ldr	r3, [r3, #28]
 800113c:	2b02      	cmp	r3, #2
 800113e:	d146      	bne.n	80011ce <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001140:	4b33      	ldr	r3, [pc, #204]	@ (8001210 <HAL_RCC_OscConfig+0x4cc>)
 8001142:	2200      	movs	r2, #0
 8001144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001146:	f7ff fb4f 	bl	80007e8 <HAL_GetTick>
 800114a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800114c:	e008      	b.n	8001160 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800114e:	f7ff fb4b 	bl	80007e8 <HAL_GetTick>
 8001152:	4602      	mov	r2, r0
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d901      	bls.n	8001160 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	e06d      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001160:	4b29      	ldr	r3, [pc, #164]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001168:	2b00      	cmp	r3, #0
 800116a:	d1f0      	bne.n	800114e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6a1b      	ldr	r3, [r3, #32]
 8001170:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001174:	d108      	bne.n	8001188 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001176:	4b24      	ldr	r3, [pc, #144]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	4921      	ldr	r1, [pc, #132]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 8001184:	4313      	orrs	r3, r2
 8001186:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001188:	4b1f      	ldr	r3, [pc, #124]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a19      	ldr	r1, [r3, #32]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001198:	430b      	orrs	r3, r1
 800119a:	491b      	ldr	r1, [pc, #108]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 800119c:	4313      	orrs	r3, r2
 800119e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80011a0:	4b1b      	ldr	r3, [pc, #108]	@ (8001210 <HAL_RCC_OscConfig+0x4cc>)
 80011a2:	2201      	movs	r2, #1
 80011a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011a6:	f7ff fb1f 	bl	80007e8 <HAL_GetTick>
 80011aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011ac:	e008      	b.n	80011c0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011ae:	f7ff fb1b 	bl	80007e8 <HAL_GetTick>
 80011b2:	4602      	mov	r2, r0
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	1ad3      	subs	r3, r2, r3
 80011b8:	2b02      	cmp	r3, #2
 80011ba:	d901      	bls.n	80011c0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80011bc:	2303      	movs	r3, #3
 80011be:	e03d      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80011c0:	4b11      	ldr	r3, [pc, #68]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d0f0      	beq.n	80011ae <HAL_RCC_OscConfig+0x46a>
 80011cc:	e035      	b.n	800123a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80011ce:	4b10      	ldr	r3, [pc, #64]	@ (8001210 <HAL_RCC_OscConfig+0x4cc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d4:	f7ff fb08 	bl	80007e8 <HAL_GetTick>
 80011d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011da:	e008      	b.n	80011ee <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80011dc:	f7ff fb04 	bl	80007e8 <HAL_GetTick>
 80011e0:	4602      	mov	r2, r0
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	1ad3      	subs	r3, r2, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d901      	bls.n	80011ee <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80011ea:	2303      	movs	r3, #3
 80011ec:	e026      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011ee:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_RCC_OscConfig+0x4c4>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d1f0      	bne.n	80011dc <HAL_RCC_OscConfig+0x498>
 80011fa:	e01e      	b.n	800123a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	69db      	ldr	r3, [r3, #28]
 8001200:	2b01      	cmp	r3, #1
 8001202:	d107      	bne.n	8001214 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e019      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
 8001208:	40021000 	.word	0x40021000
 800120c:	40007000 	.word	0x40007000
 8001210:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001214:	4b0b      	ldr	r3, [pc, #44]	@ (8001244 <HAL_RCC_OscConfig+0x500>)
 8001216:	685b      	ldr	r3, [r3, #4]
 8001218:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6a1b      	ldr	r3, [r3, #32]
 8001224:	429a      	cmp	r2, r3
 8001226:	d106      	bne.n	8001236 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001232:	429a      	cmp	r2, r3
 8001234:	d001      	beq.n	800123a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800123a:	2300      	movs	r3, #0
}
 800123c:	4618      	mov	r0, r3
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d101      	bne.n	800125c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001258:	2301      	movs	r3, #1
 800125a:	e0d0      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800125c:	4b6a      	ldr	r3, [pc, #424]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0307 	and.w	r3, r3, #7
 8001264:	683a      	ldr	r2, [r7, #0]
 8001266:	429a      	cmp	r2, r3
 8001268:	d910      	bls.n	800128c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800126a:	4b67      	ldr	r3, [pc, #412]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f023 0207 	bic.w	r2, r3, #7
 8001272:	4965      	ldr	r1, [pc, #404]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	4313      	orrs	r3, r2
 8001278:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800127a:	4b63      	ldr	r3, [pc, #396]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0307 	and.w	r3, r3, #7
 8001282:	683a      	ldr	r2, [r7, #0]
 8001284:	429a      	cmp	r2, r3
 8001286:	d001      	beq.n	800128c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001288:	2301      	movs	r3, #1
 800128a:	e0b8      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d020      	beq.n	80012da <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d005      	beq.n	80012b0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80012a4:	4b59      	ldr	r3, [pc, #356]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	4a58      	ldr	r2, [pc, #352]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012aa:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80012ae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f003 0308 	and.w	r3, r3, #8
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d005      	beq.n	80012c8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80012bc:	4b53      	ldr	r3, [pc, #332]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	4a52      	ldr	r2, [pc, #328]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012c2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80012c6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80012c8:	4b50      	ldr	r3, [pc, #320]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	689b      	ldr	r3, [r3, #8]
 80012d4:	494d      	ldr	r1, [pc, #308]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d040      	beq.n	8001368 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	685b      	ldr	r3, [r3, #4]
 80012ea:	2b01      	cmp	r3, #1
 80012ec:	d107      	bne.n	80012fe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ee:	4b47      	ldr	r3, [pc, #284]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d115      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012fa:	2301      	movs	r3, #1
 80012fc:	e07f      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	685b      	ldr	r3, [r3, #4]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d107      	bne.n	8001316 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001306:	4b41      	ldr	r3, [pc, #260]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d109      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e073      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001316:	4b3d      	ldr	r3, [pc, #244]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d101      	bne.n	8001326 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001322:	2301      	movs	r3, #1
 8001324:	e06b      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001326:	4b39      	ldr	r3, [pc, #228]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f023 0203 	bic.w	r2, r3, #3
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	4936      	ldr	r1, [pc, #216]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001334:	4313      	orrs	r3, r2
 8001336:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001338:	f7ff fa56 	bl	80007e8 <HAL_GetTick>
 800133c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800133e:	e00a      	b.n	8001356 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001340:	f7ff fa52 	bl	80007e8 <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800134e:	4293      	cmp	r3, r2
 8001350:	d901      	bls.n	8001356 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001352:	2303      	movs	r3, #3
 8001354:	e053      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001356:	4b2d      	ldr	r3, [pc, #180]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 020c 	and.w	r2, r3, #12
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	429a      	cmp	r2, r3
 8001366:	d1eb      	bne.n	8001340 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001368:	4b27      	ldr	r3, [pc, #156]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0307 	and.w	r3, r3, #7
 8001370:	683a      	ldr	r2, [r7, #0]
 8001372:	429a      	cmp	r2, r3
 8001374:	d210      	bcs.n	8001398 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001376:	4b24      	ldr	r3, [pc, #144]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 0207 	bic.w	r2, r3, #7
 800137e:	4922      	ldr	r1, [pc, #136]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	4313      	orrs	r3, r2
 8001384:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <HAL_RCC_ClockConfig+0x1c0>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	683a      	ldr	r2, [r7, #0]
 8001390:	429a      	cmp	r2, r3
 8001392:	d001      	beq.n	8001398 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001394:	2301      	movs	r3, #1
 8001396:	e032      	b.n	80013fe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d008      	beq.n	80013b6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80013a4:	4b19      	ldr	r3, [pc, #100]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	4916      	ldr	r1, [pc, #88]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013b2:	4313      	orrs	r3, r2
 80013b4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 0308 	and.w	r3, r3, #8
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d009      	beq.n	80013d6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80013c2:	4b12      	ldr	r3, [pc, #72]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	490e      	ldr	r1, [pc, #56]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80013d6:	f000 f821 	bl	800141c <HAL_RCC_GetSysClockFreq>
 80013da:	4602      	mov	r2, r0
 80013dc:	4b0b      	ldr	r3, [pc, #44]	@ (800140c <HAL_RCC_ClockConfig+0x1c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	091b      	lsrs	r3, r3, #4
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	490a      	ldr	r1, [pc, #40]	@ (8001410 <HAL_RCC_ClockConfig+0x1c8>)
 80013e8:	5ccb      	ldrb	r3, [r1, r3]
 80013ea:	fa22 f303 	lsr.w	r3, r2, r3
 80013ee:	4a09      	ldr	r2, [pc, #36]	@ (8001414 <HAL_RCC_ClockConfig+0x1cc>)
 80013f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80013f2:	4b09      	ldr	r3, [pc, #36]	@ (8001418 <HAL_RCC_ClockConfig+0x1d0>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f9b4 	bl	8000764 <HAL_InitTick>

  return HAL_OK;
 80013fc:	2300      	movs	r3, #0
}
 80013fe:	4618      	mov	r0, r3
 8001400:	3710      	adds	r7, #16
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	40022000 	.word	0x40022000
 800140c:	40021000 	.word	0x40021000
 8001410:	08002e60 	.word	0x08002e60
 8001414:	20000000 	.word	0x20000000
 8001418:	20000004 	.word	0x20000004

0800141c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800141c:	b480      	push	{r7}
 800141e:	b087      	sub	sp, #28
 8001420:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	2300      	movs	r3, #0
 8001428:	60bb      	str	r3, [r7, #8]
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	2300      	movs	r3, #0
 8001430:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001436:	4b1e      	ldr	r3, [pc, #120]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x94>)
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b04      	cmp	r3, #4
 8001444:	d002      	beq.n	800144c <HAL_RCC_GetSysClockFreq+0x30>
 8001446:	2b08      	cmp	r3, #8
 8001448:	d003      	beq.n	8001452 <HAL_RCC_GetSysClockFreq+0x36>
 800144a:	e027      	b.n	800149c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800144c:	4b19      	ldr	r3, [pc, #100]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800144e:	613b      	str	r3, [r7, #16]
      break;
 8001450:	e027      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	0c9b      	lsrs	r3, r3, #18
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	4a17      	ldr	r2, [pc, #92]	@ (80014b8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800145c:	5cd3      	ldrb	r3, [r2, r3]
 800145e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d010      	beq.n	800148c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800146a:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <HAL_RCC_GetSysClockFreq+0x94>)
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	0c5b      	lsrs	r3, r3, #17
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	4a11      	ldr	r2, [pc, #68]	@ (80014bc <HAL_RCC_GetSysClockFreq+0xa0>)
 8001476:	5cd3      	ldrb	r3, [r2, r3]
 8001478:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	4a0d      	ldr	r2, [pc, #52]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800147e:	fb03 f202 	mul.w	r2, r3, r2
 8001482:	68bb      	ldr	r3, [r7, #8]
 8001484:	fbb2 f3f3 	udiv	r3, r2, r3
 8001488:	617b      	str	r3, [r7, #20]
 800148a:	e004      	b.n	8001496 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a0c      	ldr	r2, [pc, #48]	@ (80014c0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	613b      	str	r3, [r7, #16]
      break;
 800149a:	e002      	b.n	80014a2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800149c:	4b05      	ldr	r3, [pc, #20]	@ (80014b4 <HAL_RCC_GetSysClockFreq+0x98>)
 800149e:	613b      	str	r3, [r7, #16]
      break;
 80014a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014a2:	693b      	ldr	r3, [r7, #16]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	371c      	adds	r7, #28
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bc80      	pop	{r7}
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	40021000 	.word	0x40021000
 80014b4:	007a1200 	.word	0x007a1200
 80014b8:	08002e78 	.word	0x08002e78
 80014bc:	08002e88 	.word	0x08002e88
 80014c0:	003d0900 	.word	0x003d0900

080014c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014c8:	4b02      	ldr	r3, [pc, #8]	@ (80014d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	20000000 	.word	0x20000000

080014d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80014dc:	f7ff fff2 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 80014e0:	4602      	mov	r2, r0
 80014e2:	4b05      	ldr	r3, [pc, #20]	@ (80014f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	0a1b      	lsrs	r3, r3, #8
 80014e8:	f003 0307 	and.w	r3, r3, #7
 80014ec:	4903      	ldr	r1, [pc, #12]	@ (80014fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80014ee:	5ccb      	ldrb	r3, [r1, r3]
 80014f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40021000 	.word	0x40021000
 80014fc:	08002e70 	.word	0x08002e70

08001500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001504:	f7ff ffde 	bl	80014c4 <HAL_RCC_GetHCLKFreq>
 8001508:	4602      	mov	r2, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	@ (8001520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800150c:	685b      	ldr	r3, [r3, #4]
 800150e:	0adb      	lsrs	r3, r3, #11
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4903      	ldr	r1, [pc, #12]	@ (8001524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40021000 	.word	0x40021000
 8001524:	08002e70 	.word	0x08002e70

08001528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001528:	b480      	push	{r7}
 800152a:	b085      	sub	sp, #20
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001530:	4b0a      	ldr	r3, [pc, #40]	@ (800155c <RCC_Delay+0x34>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	4a0a      	ldr	r2, [pc, #40]	@ (8001560 <RCC_Delay+0x38>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	0a5b      	lsrs	r3, r3, #9
 800153c:	687a      	ldr	r2, [r7, #4]
 800153e:	fb02 f303 	mul.w	r3, r2, r3
 8001542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001544:	bf00      	nop
  }
  while (Delay --);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1e5a      	subs	r2, r3, #1
 800154a:	60fa      	str	r2, [r7, #12]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d1f9      	bne.n	8001544 <RCC_Delay+0x1c>
}
 8001550:	bf00      	nop
 8001552:	bf00      	nop
 8001554:	3714      	adds	r7, #20
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr
 800155c:	20000000 	.word	0x20000000
 8001560:	10624dd3 	.word	0x10624dd3

08001564 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e076      	b.n	8001664 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800157a:	2b00      	cmp	r3, #0
 800157c:	d108      	bne.n	8001590 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001586:	d009      	beq.n	800159c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
 800158e:	e005      	b.n	800159c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2200      	movs	r2, #0
 80015a0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d106      	bne.n	80015bc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80015b6:	6878      	ldr	r0, [r7, #4]
 80015b8:	f7fe ff9a 	bl	80004f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	2202      	movs	r2, #2
 80015c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	681a      	ldr	r2, [r3, #0]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80015d2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80015e4:	431a      	orrs	r2, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	68db      	ldr	r3, [r3, #12]
 80015ea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80015ee:	431a      	orrs	r2, r3
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	691b      	ldr	r3, [r3, #16]
 80015f4:	f003 0302 	and.w	r3, r3, #2
 80015f8:	431a      	orrs	r2, r3
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	695b      	ldr	r3, [r3, #20]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	431a      	orrs	r2, r3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	699b      	ldr	r3, [r3, #24]
 8001608:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800160c:	431a      	orrs	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001620:	ea42 0103 	orr.w	r1, r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001628:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	430a      	orrs	r2, r1
 8001632:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	699b      	ldr	r3, [r3, #24]
 8001638:	0c1a      	lsrs	r2, r3, #16
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f002 0204 	and.w	r2, r2, #4
 8001642:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	69da      	ldr	r2, [r3, #28]
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001652:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2200      	movs	r2, #0
 8001658:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2201      	movs	r2, #1
 800165e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b088      	sub	sp, #32
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	603b      	str	r3, [r7, #0]
 8001678:	4613      	mov	r3, r2
 800167a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800167c:	f7ff f8b4 	bl	80007e8 <HAL_GetTick>
 8001680:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8001682:	88fb      	ldrh	r3, [r7, #6]
 8001684:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800168c:	b2db      	uxtb	r3, r3
 800168e:	2b01      	cmp	r3, #1
 8001690:	d001      	beq.n	8001696 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8001692:	2302      	movs	r3, #2
 8001694:	e12a      	b.n	80018ec <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8001696:	68bb      	ldr	r3, [r7, #8]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d002      	beq.n	80016a2 <HAL_SPI_Transmit+0x36>
 800169c:	88fb      	ldrh	r3, [r7, #6]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d101      	bne.n	80016a6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e122      	b.n	80018ec <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d101      	bne.n	80016b4 <HAL_SPI_Transmit+0x48>
 80016b0:	2302      	movs	r3, #2
 80016b2:	e11b      	b.n	80018ec <HAL_SPI_Transmit+0x280>
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	2201      	movs	r2, #1
 80016b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2203      	movs	r2, #3
 80016c0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	2200      	movs	r2, #0
 80016c8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	68ba      	ldr	r2, [r7, #8]
 80016ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	88fa      	ldrh	r2, [r7, #6]
 80016d4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	88fa      	ldrh	r2, [r7, #6]
 80016da:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	2200      	movs	r2, #0
 80016e0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	2200      	movs	r2, #0
 80016e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	2200      	movs	r2, #0
 80016ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2200      	movs	r2, #0
 80016f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001702:	d10f      	bne.n	8001724 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001712:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001722:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800172e:	2b40      	cmp	r3, #64	@ 0x40
 8001730:	d007      	beq.n	8001742 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001740:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	68db      	ldr	r3, [r3, #12]
 8001746:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800174a:	d152      	bne.n	80017f2 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d002      	beq.n	800175a <HAL_SPI_Transmit+0xee>
 8001754:	8b7b      	ldrh	r3, [r7, #26]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d145      	bne.n	80017e6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800175e:	881a      	ldrh	r2, [r3, #0]
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	1c9a      	adds	r2, r3, #2
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001774:	b29b      	uxth	r3, r3
 8001776:	3b01      	subs	r3, #1
 8001778:	b29a      	uxth	r2, r3
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800177e:	e032      	b.n	80017e6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689b      	ldr	r3, [r3, #8]
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b02      	cmp	r3, #2
 800178c:	d112      	bne.n	80017b4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800179e:	1c9a      	adds	r2, r3, #2
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017a8:	b29b      	uxth	r3, r3
 80017aa:	3b01      	subs	r3, #1
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80017b2:	e018      	b.n	80017e6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80017b4:	f7ff f818 	bl	80007e8 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	683a      	ldr	r2, [r7, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d803      	bhi.n	80017cc <HAL_SPI_Transmit+0x160>
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ca:	d102      	bne.n	80017d2 <HAL_SPI_Transmit+0x166>
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d109      	bne.n	80017e6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e082      	b.n	80018ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1c7      	bne.n	8001780 <HAL_SPI_Transmit+0x114>
 80017f0:	e053      	b.n	800189a <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d002      	beq.n	8001800 <HAL_SPI_Transmit+0x194>
 80017fa:	8b7b      	ldrh	r3, [r7, #26]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d147      	bne.n	8001890 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	330c      	adds	r3, #12
 800180a:	7812      	ldrb	r2, [r2, #0]
 800180c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	1c5a      	adds	r2, r3, #1
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800181c:	b29b      	uxth	r3, r3
 800181e:	3b01      	subs	r3, #1
 8001820:	b29a      	uxth	r2, r3
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001826:	e033      	b.n	8001890 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	689b      	ldr	r3, [r3, #8]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b02      	cmp	r3, #2
 8001834:	d113      	bne.n	800185e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	330c      	adds	r3, #12
 8001840:	7812      	ldrb	r2, [r2, #0]
 8001842:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001848:	1c5a      	adds	r2, r3, #1
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001852:	b29b      	uxth	r3, r3
 8001854:	3b01      	subs	r3, #1
 8001856:	b29a      	uxth	r2, r3
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800185c:	e018      	b.n	8001890 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800185e:	f7fe ffc3 	bl	80007e8 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	683a      	ldr	r2, [r7, #0]
 800186a:	429a      	cmp	r2, r3
 800186c:	d803      	bhi.n	8001876 <HAL_SPI_Transmit+0x20a>
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001874:	d102      	bne.n	800187c <HAL_SPI_Transmit+0x210>
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d109      	bne.n	8001890 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	2201      	movs	r2, #1
 8001880:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	2200      	movs	r2, #0
 8001888:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e02d      	b.n	80018ec <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001894:	b29b      	uxth	r3, r3
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1c6      	bne.n	8001828 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800189a:	69fa      	ldr	r2, [r7, #28]
 800189c:	6839      	ldr	r1, [r7, #0]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 fbc4 	bl	800202c <SPI_EndRxTxTransaction>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d002      	beq.n	80018b0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2220      	movs	r2, #32
 80018ae:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	689b      	ldr	r3, [r3, #8]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d10a      	bne.n	80018ce <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	68db      	ldr	r3, [r3, #12]
 80018c2:	617b      	str	r3, [r7, #20]
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	689b      	ldr	r3, [r3, #8]
 80018ca:	617b      	str	r3, [r7, #20]
 80018cc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	2200      	movs	r2, #0
 80018da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e000      	b.n	80018ec <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80018ea:	2300      	movs	r3, #0
  }
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	3720      	adds	r7, #32
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}

080018f4 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b088      	sub	sp, #32
 80018f8:	af02      	add	r7, sp, #8
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	603b      	str	r3, [r7, #0]
 8001900:	4613      	mov	r3, r2
 8001902:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800190a:	b2db      	uxtb	r3, r3
 800190c:	2b01      	cmp	r3, #1
 800190e:	d001      	beq.n	8001914 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8001910:	2302      	movs	r3, #2
 8001912:	e104      	b.n	8001b1e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800191c:	d112      	bne.n	8001944 <HAL_SPI_Receive+0x50>
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d10e      	bne.n	8001944 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	2204      	movs	r2, #4
 800192a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800192e:	88fa      	ldrh	r2, [r7, #6]
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	4613      	mov	r3, r2
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	68b9      	ldr	r1, [r7, #8]
 800193a:	68f8      	ldr	r0, [r7, #12]
 800193c:	f000 f8f3 	bl	8001b26 <HAL_SPI_TransmitReceive>
 8001940:	4603      	mov	r3, r0
 8001942:	e0ec      	b.n	8001b1e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001944:	f7fe ff50 	bl	80007e8 <HAL_GetTick>
 8001948:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d002      	beq.n	8001956 <HAL_SPI_Receive+0x62>
 8001950:	88fb      	ldrh	r3, [r7, #6]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d101      	bne.n	800195a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0e1      	b.n	8001b1e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001960:	2b01      	cmp	r3, #1
 8001962:	d101      	bne.n	8001968 <HAL_SPI_Receive+0x74>
 8001964:	2302      	movs	r3, #2
 8001966:	e0da      	b.n	8001b1e <HAL_SPI_Receive+0x22a>
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2201      	movs	r2, #1
 800196c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2204      	movs	r2, #4
 8001974:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68ba      	ldr	r2, [r7, #8]
 8001982:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	88fa      	ldrh	r2, [r7, #6]
 8001988:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	88fa      	ldrh	r2, [r7, #6]
 800198e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	2200      	movs	r2, #0
 8001994:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2200      	movs	r2, #0
 800199a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	2200      	movs	r2, #0
 80019a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	2200      	movs	r2, #0
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2200      	movs	r2, #0
 80019ac:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019b6:	d10f      	bne.n	80019d8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80019c6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80019d6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80019e2:	2b40      	cmp	r3, #64	@ 0x40
 80019e4:	d007      	beq.n	80019f6 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	681a      	ldr	r2, [r3, #0]
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80019f4:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	68db      	ldr	r3, [r3, #12]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d170      	bne.n	8001ae0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80019fe:	e035      	b.n	8001a6c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d115      	bne.n	8001a3a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f103 020c 	add.w	r2, r3, #12
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a1a:	7812      	ldrb	r2, [r2, #0]
 8001a1c:	b2d2      	uxtb	r2, r2
 8001a1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a24:	1c5a      	adds	r2, r3, #1
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a2e:	b29b      	uxth	r3, r3
 8001a30:	3b01      	subs	r3, #1
 8001a32:	b29a      	uxth	r2, r3
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001a38:	e018      	b.n	8001a6c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001a3a:	f7fe fed5 	bl	80007e8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	683a      	ldr	r2, [r7, #0]
 8001a46:	429a      	cmp	r2, r3
 8001a48:	d803      	bhi.n	8001a52 <HAL_SPI_Receive+0x15e>
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a50:	d102      	bne.n	8001a58 <HAL_SPI_Receive+0x164>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d109      	bne.n	8001a6c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2201      	movs	r2, #1
 8001a5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001a68:	2303      	movs	r3, #3
 8001a6a:	e058      	b.n	8001b1e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d1c4      	bne.n	8001a00 <HAL_SPI_Receive+0x10c>
 8001a76:	e038      	b.n	8001aea <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d113      	bne.n	8001aae <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a90:	b292      	uxth	r2, r2
 8001a92:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a98:	1c9a      	adds	r2, r3, #2
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	b29a      	uxth	r2, r3
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8001aac:	e018      	b.n	8001ae0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001aae:	f7fe fe9b 	bl	80007e8 <HAL_GetTick>
 8001ab2:	4602      	mov	r2, r0
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	683a      	ldr	r2, [r7, #0]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d803      	bhi.n	8001ac6 <HAL_SPI_Receive+0x1d2>
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ac4:	d102      	bne.n	8001acc <HAL_SPI_Receive+0x1d8>
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d109      	bne.n	8001ae0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8001adc:	2303      	movs	r3, #3
 8001ade:	e01e      	b.n	8001b1e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001ae4:	b29b      	uxth	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1c6      	bne.n	8001a78 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	6839      	ldr	r1, [r7, #0]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 fa4a 	bl	8001f88 <SPI_EndRxTransaction>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	2220      	movs	r2, #32
 8001afe:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2201      	movs	r2, #1
 8001b04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e000      	b.n	8001b1e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8001b1c:	2300      	movs	r3, #0
  }
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3718      	adds	r7, #24
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}

08001b26 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b08a      	sub	sp, #40	@ 0x28
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	60f8      	str	r0, [r7, #12]
 8001b2e:	60b9      	str	r1, [r7, #8]
 8001b30:	607a      	str	r2, [r7, #4]
 8001b32:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8001b34:	2301      	movs	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001b38:	f7fe fe56 	bl	80007e8 <HAL_GetTick>
 8001b3c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001b44:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001b4c:	887b      	ldrh	r3, [r7, #2]
 8001b4e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8001b50:	7ffb      	ldrb	r3, [r7, #31]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d00c      	beq.n	8001b70 <HAL_SPI_TransmitReceive+0x4a>
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001b5c:	d106      	bne.n	8001b6c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d102      	bne.n	8001b6c <HAL_SPI_TransmitReceive+0x46>
 8001b66:	7ffb      	ldrb	r3, [r7, #31]
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d001      	beq.n	8001b70 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	e17f      	b.n	8001e70 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d005      	beq.n	8001b82 <HAL_SPI_TransmitReceive+0x5c>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d002      	beq.n	8001b82 <HAL_SPI_TransmitReceive+0x5c>
 8001b7c:	887b      	ldrh	r3, [r7, #2]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e174      	b.n	8001e70 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d101      	bne.n	8001b94 <HAL_SPI_TransmitReceive+0x6e>
 8001b90:	2302      	movs	r3, #2
 8001b92:	e16d      	b.n	8001e70 <HAL_SPI_TransmitReceive+0x34a>
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d003      	beq.n	8001bb0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2205      	movs	r2, #5
 8001bac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	887a      	ldrh	r2, [r7, #2]
 8001bc0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	887a      	ldrh	r2, [r7, #2]
 8001bc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	68ba      	ldr	r2, [r7, #8]
 8001bcc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	887a      	ldrh	r2, [r7, #2]
 8001bd2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	887a      	ldrh	r2, [r7, #2]
 8001bd8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2200      	movs	r2, #0
 8001be4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bf0:	2b40      	cmp	r3, #64	@ 0x40
 8001bf2:	d007      	beq.n	8001c04 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001c02:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001c0c:	d17e      	bne.n	8001d0c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d002      	beq.n	8001c1c <HAL_SPI_TransmitReceive+0xf6>
 8001c16:	8afb      	ldrh	r3, [r7, #22]
 8001c18:	2b01      	cmp	r3, #1
 8001c1a:	d16c      	bne.n	8001cf6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c20:	881a      	ldrh	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2c:	1c9a      	adds	r2, r3, #2
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	b29a      	uxth	r2, r3
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001c40:	e059      	b.n	8001cf6 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d11b      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x162>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d016      	beq.n	8001c88 <HAL_SPI_TransmitReceive+0x162>
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d113      	bne.n	8001c88 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c64:	881a      	ldrh	r2, [r3, #0]
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c70:	1c9a      	adds	r2, r3, #2
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001c7a:	b29b      	uxth	r3, r3
 8001c7c:	3b01      	subs	r3, #1
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d119      	bne.n	8001cca <HAL_SPI_TransmitReceive+0x1a4>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001c9a:	b29b      	uxth	r3, r3
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d014      	beq.n	8001cca <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001caa:	b292      	uxth	r2, r2
 8001cac:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cb2:	1c9a      	adds	r2, r3, #2
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001cbc:	b29b      	uxth	r3, r3
 8001cbe:	3b01      	subs	r3, #1
 8001cc0:	b29a      	uxth	r2, r3
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8001cca:	f7fe fd8d 	bl	80007e8 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	6a3b      	ldr	r3, [r7, #32]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001cd6:	429a      	cmp	r2, r3
 8001cd8:	d80d      	bhi.n	8001cf6 <HAL_SPI_TransmitReceive+0x1d0>
 8001cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ce0:	d009      	beq.n	8001cf6 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2200      	movs	r2, #0
 8001cee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e0bc      	b.n	8001e70 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001cfa:	b29b      	uxth	r3, r3
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d1a0      	bne.n	8001c42 <HAL_SPI_TransmitReceive+0x11c>
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d19b      	bne.n	8001c42 <HAL_SPI_TransmitReceive+0x11c>
 8001d0a:	e082      	b.n	8001e12 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d002      	beq.n	8001d1a <HAL_SPI_TransmitReceive+0x1f4>
 8001d14:	8afb      	ldrh	r3, [r7, #22]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d171      	bne.n	8001dfe <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	330c      	adds	r3, #12
 8001d24:	7812      	ldrb	r2, [r2, #0]
 8001d26:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001d28:	68fb      	ldr	r3, [r7, #12]
 8001d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2c:	1c5a      	adds	r2, r3, #1
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	3b01      	subs	r3, #1
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001d40:	e05d      	b.n	8001dfe <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d11c      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x264>
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d017      	beq.n	8001d8a <HAL_SPI_TransmitReceive+0x264>
 8001d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d114      	bne.n	8001d8a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	330c      	adds	r3, #12
 8001d6a:	7812      	ldrb	r2, [r2, #0]
 8001d6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d72:	1c5a      	adds	r2, r3, #1
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	689b      	ldr	r3, [r3, #8]
 8001d90:	f003 0301 	and.w	r3, r3, #1
 8001d94:	2b01      	cmp	r3, #1
 8001d96:	d119      	bne.n	8001dcc <HAL_SPI_TransmitReceive+0x2a6>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d014      	beq.n	8001dcc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001db4:	1c5a      	adds	r2, r3, #1
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001dbe:	b29b      	uxth	r3, r3
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8001dcc:	f7fe fd0c 	bl	80007e8 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a3b      	ldr	r3, [r7, #32]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d803      	bhi.n	8001de4 <HAL_SPI_TransmitReceive+0x2be>
 8001ddc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de2:	d102      	bne.n	8001dea <HAL_SPI_TransmitReceive+0x2c4>
 8001de4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d109      	bne.n	8001dfe <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2201      	movs	r2, #1
 8001dee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8001dfa:	2303      	movs	r3, #3
 8001dfc:	e038      	b.n	8001e70 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d19c      	bne.n	8001d42 <HAL_SPI_TransmitReceive+0x21c>
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d197      	bne.n	8001d42 <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	f000 f908 	bl	800202c <SPI_EndRxTxTransaction>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d008      	beq.n	8001e34 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	2220      	movs	r2, #32
 8001e26:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e01d      	b.n	8001e70 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d10a      	bne.n	8001e52 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	613b      	str	r3, [r7, #16]
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	68db      	ldr	r3, [r3, #12]
 8001e46:	613b      	str	r3, [r7, #16]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e000      	b.n	8001e70 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8001e6e:	2300      	movs	r3, #0
  }
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3728      	adds	r7, #40	@ 0x28
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b088      	sub	sp, #32
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	603b      	str	r3, [r7, #0]
 8001e84:	4613      	mov	r3, r2
 8001e86:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001e88:	f7fe fcae 	bl	80007e8 <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e90:	1a9b      	subs	r3, r3, r2
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	4413      	add	r3, r2
 8001e96:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001e98:	f7fe fca6 	bl	80007e8 <HAL_GetTick>
 8001e9c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001e9e:	4b39      	ldr	r3, [pc, #228]	@ (8001f84 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	015b      	lsls	r3, r3, #5
 8001ea4:	0d1b      	lsrs	r3, r3, #20
 8001ea6:	69fa      	ldr	r2, [r7, #28]
 8001ea8:	fb02 f303 	mul.w	r3, r2, r3
 8001eac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001eae:	e054      	b.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001eb6:	d050      	beq.n	8001f5a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001eb8:	f7fe fc96 	bl	80007e8 <HAL_GetTick>
 8001ebc:	4602      	mov	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	69fa      	ldr	r2, [r7, #28]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d902      	bls.n	8001ece <SPI_WaitFlagStateUntilTimeout+0x56>
 8001ec8:	69fb      	ldr	r3, [r7, #28]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d13d      	bne.n	8001f4a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	685a      	ldr	r2, [r3, #4]
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8001edc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001ee6:	d111      	bne.n	8001f0c <SPI_WaitFlagStateUntilTimeout+0x94>
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001ef0:	d004      	beq.n	8001efc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001efa:	d107      	bne.n	8001f0c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001f0a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f10:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f14:	d10f      	bne.n	8001f36 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001f34:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8001f46:	2303      	movs	r3, #3
 8001f48:	e017      	b.n	8001f7a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d101      	bne.n	8001f54 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001f50:	2300      	movs	r3, #0
 8001f52:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	689a      	ldr	r2, [r3, #8]
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	4013      	ands	r3, r2
 8001f64:	68ba      	ldr	r2, [r7, #8]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	bf0c      	ite	eq
 8001f6a:	2301      	moveq	r3, #1
 8001f6c:	2300      	movne	r3, #0
 8001f6e:	b2db      	uxtb	r3, r3
 8001f70:	461a      	mov	r2, r3
 8001f72:	79fb      	ldrb	r3, [r7, #7]
 8001f74:	429a      	cmp	r2, r3
 8001f76:	d19b      	bne.n	8001eb0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8001f78:	2300      	movs	r3, #0
}
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	3720      	adds	r7, #32
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	bf00      	nop
 8001f84:	20000000 	.word	0x20000000

08001f88 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af02      	add	r7, sp, #8
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001f9c:	d111      	bne.n	8001fc2 <SPI_EndRxTransaction+0x3a>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001fa6:	d004      	beq.n	8001fb2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fb0:	d107      	bne.n	8001fc2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681a      	ldr	r2, [r3, #0]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fc0:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001fca:	d117      	bne.n	8001ffc <SPI_EndRxTransaction+0x74>
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd4:	d112      	bne.n	8001ffc <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	9300      	str	r3, [sp, #0]
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2101      	movs	r1, #1
 8001fe0:	68f8      	ldr	r0, [r7, #12]
 8001fe2:	f7ff ff49 	bl	8001e78 <SPI_WaitFlagStateUntilTimeout>
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d01a      	beq.n	8002022 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001ff0:	f043 0220 	orr.w	r2, r3, #32
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8001ff8:	2303      	movs	r3, #3
 8001ffa:	e013      	b.n	8002024 <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	9300      	str	r3, [sp, #0]
 8002000:	68bb      	ldr	r3, [r7, #8]
 8002002:	2200      	movs	r2, #0
 8002004:	2180      	movs	r1, #128	@ 0x80
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f7ff ff36 	bl	8001e78 <SPI_WaitFlagStateUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d007      	beq.n	8002022 <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002016:	f043 0220 	orr.w	r2, r3, #32
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800201e:	2303      	movs	r3, #3
 8002020:	e000      	b.n	8002024 <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	68bb      	ldr	r3, [r7, #8]
 800203e:	2201      	movs	r2, #1
 8002040:	2102      	movs	r1, #2
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f7ff ff18 	bl	8001e78 <SPI_WaitFlagStateUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d007      	beq.n	800205e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002052:	f043 0220 	orr.w	r2, r3, #32
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e013      	b.n	8002086 <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	9300      	str	r3, [sp, #0]
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2200      	movs	r2, #0
 8002066:	2180      	movs	r1, #128	@ 0x80
 8002068:	68f8      	ldr	r0, [r7, #12]
 800206a:	f7ff ff05 	bl	8001e78 <SPI_WaitFlagStateUntilTimeout>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d007      	beq.n	8002084 <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002078:	f043 0220 	orr.w	r2, r3, #32
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002080:	2303      	movs	r3, #3
 8002082:	e000      	b.n	8002086 <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 8002084:	2300      	movs	r3, #0
}
 8002086:	4618      	mov	r0, r3
 8002088:	3710      	adds	r7, #16
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800208e:	b580      	push	{r7, lr}
 8002090:	b082      	sub	sp, #8
 8002092:	af00      	add	r7, sp, #0
 8002094:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d101      	bne.n	80020a0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	e042      	b.n	8002126 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d106      	bne.n	80020ba <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020b4:	6878      	ldr	r0, [r7, #4]
 80020b6:	f7fe fa65 	bl	8000584 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2224      	movs	r2, #36	@ 0x24
 80020be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	68da      	ldr	r2, [r3, #12]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020d0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f972 	bl	80023bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	691a      	ldr	r2, [r3, #16]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80020e6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	695a      	ldr	r2, [r3, #20]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80020f6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68da      	ldr	r2, [r3, #12]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002106:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2200      	movs	r2, #0
 800210c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2220      	movs	r2, #32
 8002112:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2220      	movs	r2, #32
 800211a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2200      	movs	r2, #0
 8002122:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3708      	adds	r7, #8
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}

0800212e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b08a      	sub	sp, #40	@ 0x28
 8002132:	af02      	add	r7, sp, #8
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	603b      	str	r3, [r7, #0]
 800213a:	4613      	mov	r3, r2
 800213c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b20      	cmp	r3, #32
 800214c:	d175      	bne.n	800223a <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d002      	beq.n	800215a <HAL_UART_Transmit+0x2c>
 8002154:	88fb      	ldrh	r3, [r7, #6]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e06e      	b.n	800223c <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2221      	movs	r2, #33	@ 0x21
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800216c:	f7fe fb3c 	bl	80007e8 <HAL_GetTick>
 8002170:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	88fa      	ldrh	r2, [r7, #6]
 8002176:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	88fa      	ldrh	r2, [r7, #6]
 800217c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	689b      	ldr	r3, [r3, #8]
 8002182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002186:	d108      	bne.n	800219a <HAL_UART_Transmit+0x6c>
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	691b      	ldr	r3, [r3, #16]
 800218c:	2b00      	cmp	r3, #0
 800218e:	d104      	bne.n	800219a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002190:	2300      	movs	r3, #0
 8002192:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	61bb      	str	r3, [r7, #24]
 8002198:	e003      	b.n	80021a2 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80021a2:	e02e      	b.n	8002202 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	9300      	str	r3, [sp, #0]
 80021a8:	697b      	ldr	r3, [r7, #20]
 80021aa:	2200      	movs	r2, #0
 80021ac:	2180      	movs	r1, #128	@ 0x80
 80021ae:	68f8      	ldr	r0, [r7, #12]
 80021b0:	f000 f848 	bl	8002244 <UART_WaitOnFlagUntilTimeout>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d005      	beq.n	80021c6 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	2220      	movs	r2, #32
 80021be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e03a      	b.n	800223c <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80021cc:	69bb      	ldr	r3, [r7, #24]
 80021ce:	881b      	ldrh	r3, [r3, #0]
 80021d0:	461a      	mov	r2, r3
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80021da:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	3302      	adds	r3, #2
 80021e0:	61bb      	str	r3, [r7, #24]
 80021e2:	e007      	b.n	80021f4 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	781a      	ldrb	r2, [r3, #0]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	3301      	adds	r3, #1
 80021f2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	3b01      	subs	r3, #1
 80021fc:	b29a      	uxth	r2, r3
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002206:	b29b      	uxth	r3, r3
 8002208:	2b00      	cmp	r3, #0
 800220a:	d1cb      	bne.n	80021a4 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	9300      	str	r3, [sp, #0]
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	2200      	movs	r2, #0
 8002214:	2140      	movs	r1, #64	@ 0x40
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 f814 	bl	8002244 <UART_WaitOnFlagUntilTimeout>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2220      	movs	r2, #32
 8002226:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800222a:	2303      	movs	r3, #3
 800222c:	e006      	b.n	800223c <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2220      	movs	r2, #32
 8002232:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800223a:	2302      	movs	r3, #2
  }
}
 800223c:	4618      	mov	r0, r3
 800223e:	3720      	adds	r7, #32
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	60f8      	str	r0, [r7, #12]
 800224c:	60b9      	str	r1, [r7, #8]
 800224e:	603b      	str	r3, [r7, #0]
 8002250:	4613      	mov	r3, r2
 8002252:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002254:	e03b      	b.n	80022ce <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002256:	6a3b      	ldr	r3, [r7, #32]
 8002258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800225c:	d037      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800225e:	f7fe fac3 	bl	80007e8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	6a3a      	ldr	r2, [r7, #32]
 800226a:	429a      	cmp	r2, r3
 800226c:	d302      	bcc.n	8002274 <UART_WaitOnFlagUntilTimeout+0x30>
 800226e:	6a3b      	ldr	r3, [r7, #32]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d101      	bne.n	8002278 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e03a      	b.n	80022ee <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68db      	ldr	r3, [r3, #12]
 800227e:	f003 0304 	and.w	r3, r3, #4
 8002282:	2b00      	cmp	r3, #0
 8002284:	d023      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x8a>
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b80      	cmp	r3, #128	@ 0x80
 800228a:	d020      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x8a>
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	2b40      	cmp	r3, #64	@ 0x40
 8002290:	d01d      	beq.n	80022ce <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b08      	cmp	r3, #8
 800229e:	d116      	bne.n	80022ce <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80022a0:	2300      	movs	r3, #0
 80022a2:	617b      	str	r3, [r7, #20]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	617b      	str	r3, [r7, #20]
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	617b      	str	r3, [r7, #20]
 80022b4:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80022b6:	68f8      	ldr	r0, [r7, #12]
 80022b8:	f000 f81d 	bl	80022f6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2208      	movs	r2, #8
 80022c0:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	2200      	movs	r2, #0
 80022c6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e00f      	b.n	80022ee <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	4013      	ands	r3, r2
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	429a      	cmp	r2, r3
 80022dc:	bf0c      	ite	eq
 80022de:	2301      	moveq	r3, #1
 80022e0:	2300      	movne	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	461a      	mov	r2, r3
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d0b4      	beq.n	8002256 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3718      	adds	r7, #24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b095      	sub	sp, #84	@ 0x54
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	330c      	adds	r3, #12
 8002304:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002306:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002308:	e853 3f00 	ldrex	r3, [r3]
 800230c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800230e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002314:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	330c      	adds	r3, #12
 800231c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800231e:	643a      	str	r2, [r7, #64]	@ 0x40
 8002320:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002322:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002324:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002326:	e841 2300 	strex	r3, r2, [r1]
 800232a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800232c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1e5      	bne.n	80022fe <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	3314      	adds	r3, #20
 8002338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800233a:	6a3b      	ldr	r3, [r7, #32]
 800233c:	e853 3f00 	ldrex	r3, [r3]
 8002340:	61fb      	str	r3, [r7, #28]
   return(result);
 8002342:	69fb      	ldr	r3, [r7, #28]
 8002344:	f023 0301 	bic.w	r3, r3, #1
 8002348:	64bb      	str	r3, [r7, #72]	@ 0x48
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	3314      	adds	r3, #20
 8002350:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002352:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002354:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002356:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002358:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800235a:	e841 2300 	strex	r3, r2, [r1]
 800235e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1e5      	bne.n	8002332 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236a:	2b01      	cmp	r3, #1
 800236c:	d119      	bne.n	80023a2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	330c      	adds	r3, #12
 8002374:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	e853 3f00 	ldrex	r3, [r3]
 800237c:	60bb      	str	r3, [r7, #8]
   return(result);
 800237e:	68bb      	ldr	r3, [r7, #8]
 8002380:	f023 0310 	bic.w	r3, r3, #16
 8002384:	647b      	str	r3, [r7, #68]	@ 0x44
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	330c      	adds	r3, #12
 800238c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800238e:	61ba      	str	r2, [r7, #24]
 8002390:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002392:	6979      	ldr	r1, [r7, #20]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	e841 2300 	strex	r3, r2, [r1]
 800239a:	613b      	str	r3, [r7, #16]
   return(result);
 800239c:	693b      	ldr	r3, [r7, #16]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d1e5      	bne.n	800236e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2220      	movs	r2, #32
 80023a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2200      	movs	r2, #0
 80023ae:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80023b0:	bf00      	nop
 80023b2:	3754      	adds	r7, #84	@ 0x54
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bc80      	pop	{r7}
 80023b8:	4770      	bx	lr
	...

080023bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	691b      	ldr	r3, [r3, #16]
 80023ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	68da      	ldr	r2, [r3, #12]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	689a      	ldr	r2, [r3, #8]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	431a      	orrs	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	695b      	ldr	r3, [r3, #20]
 80023e8:	4313      	orrs	r3, r2
 80023ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	68db      	ldr	r3, [r3, #12]
 80023f2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80023f6:	f023 030c 	bic.w	r3, r3, #12
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	6812      	ldr	r2, [r2, #0]
 80023fe:	68b9      	ldr	r1, [r7, #8]
 8002400:	430b      	orrs	r3, r1
 8002402:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695b      	ldr	r3, [r3, #20]
 800240a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	699a      	ldr	r2, [r3, #24]
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	430a      	orrs	r2, r1
 8002418:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a2c      	ldr	r2, [pc, #176]	@ (80024d0 <UART_SetConfig+0x114>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d103      	bne.n	800242c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002424:	f7ff f86c 	bl	8001500 <HAL_RCC_GetPCLK2Freq>
 8002428:	60f8      	str	r0, [r7, #12]
 800242a:	e002      	b.n	8002432 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800242c:	f7ff f854 	bl	80014d8 <HAL_RCC_GetPCLK1Freq>
 8002430:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002432:	68fa      	ldr	r2, [r7, #12]
 8002434:	4613      	mov	r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	4413      	add	r3, r2
 800243a:	009a      	lsls	r2, r3, #2
 800243c:	441a      	add	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	fbb2 f3f3 	udiv	r3, r2, r3
 8002448:	4a22      	ldr	r2, [pc, #136]	@ (80024d4 <UART_SetConfig+0x118>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	0119      	lsls	r1, r3, #4
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	4613      	mov	r3, r2
 8002456:	009b      	lsls	r3, r3, #2
 8002458:	4413      	add	r3, r2
 800245a:	009a      	lsls	r2, r3, #2
 800245c:	441a      	add	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	009b      	lsls	r3, r3, #2
 8002464:	fbb2 f2f3 	udiv	r2, r2, r3
 8002468:	4b1a      	ldr	r3, [pc, #104]	@ (80024d4 <UART_SetConfig+0x118>)
 800246a:	fba3 0302 	umull	r0, r3, r3, r2
 800246e:	095b      	lsrs	r3, r3, #5
 8002470:	2064      	movs	r0, #100	@ 0x64
 8002472:	fb00 f303 	mul.w	r3, r0, r3
 8002476:	1ad3      	subs	r3, r2, r3
 8002478:	011b      	lsls	r3, r3, #4
 800247a:	3332      	adds	r3, #50	@ 0x32
 800247c:	4a15      	ldr	r2, [pc, #84]	@ (80024d4 <UART_SetConfig+0x118>)
 800247e:	fba2 2303 	umull	r2, r3, r2, r3
 8002482:	095b      	lsrs	r3, r3, #5
 8002484:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002488:	4419      	add	r1, r3
 800248a:	68fa      	ldr	r2, [r7, #12]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	009a      	lsls	r2, r3, #2
 8002494:	441a      	add	r2, r3
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	fbb2 f2f3 	udiv	r2, r2, r3
 80024a0:	4b0c      	ldr	r3, [pc, #48]	@ (80024d4 <UART_SetConfig+0x118>)
 80024a2:	fba3 0302 	umull	r0, r3, r3, r2
 80024a6:	095b      	lsrs	r3, r3, #5
 80024a8:	2064      	movs	r0, #100	@ 0x64
 80024aa:	fb00 f303 	mul.w	r3, r0, r3
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	011b      	lsls	r3, r3, #4
 80024b2:	3332      	adds	r3, #50	@ 0x32
 80024b4:	4a07      	ldr	r2, [pc, #28]	@ (80024d4 <UART_SetConfig+0x118>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	095b      	lsrs	r3, r3, #5
 80024bc:	f003 020f 	and.w	r2, r3, #15
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	440a      	add	r2, r1
 80024c6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80024c8:	bf00      	nop
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40013800 	.word	0x40013800
 80024d4:	51eb851f 	.word	0x51eb851f

080024d8 <siprintf>:
 80024d8:	b40e      	push	{r1, r2, r3}
 80024da:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80024de:	b500      	push	{lr}
 80024e0:	b09c      	sub	sp, #112	@ 0x70
 80024e2:	ab1d      	add	r3, sp, #116	@ 0x74
 80024e4:	9002      	str	r0, [sp, #8]
 80024e6:	9006      	str	r0, [sp, #24]
 80024e8:	9107      	str	r1, [sp, #28]
 80024ea:	9104      	str	r1, [sp, #16]
 80024ec:	4808      	ldr	r0, [pc, #32]	@ (8002510 <siprintf+0x38>)
 80024ee:	4909      	ldr	r1, [pc, #36]	@ (8002514 <siprintf+0x3c>)
 80024f0:	f853 2b04 	ldr.w	r2, [r3], #4
 80024f4:	9105      	str	r1, [sp, #20]
 80024f6:	6800      	ldr	r0, [r0, #0]
 80024f8:	a902      	add	r1, sp, #8
 80024fa:	9301      	str	r3, [sp, #4]
 80024fc:	f000 f992 	bl	8002824 <_svfiprintf_r>
 8002500:	2200      	movs	r2, #0
 8002502:	9b02      	ldr	r3, [sp, #8]
 8002504:	701a      	strb	r2, [r3, #0]
 8002506:	b01c      	add	sp, #112	@ 0x70
 8002508:	f85d eb04 	ldr.w	lr, [sp], #4
 800250c:	b003      	add	sp, #12
 800250e:	4770      	bx	lr
 8002510:	2000000c 	.word	0x2000000c
 8002514:	ffff0208 	.word	0xffff0208

08002518 <memset>:
 8002518:	4603      	mov	r3, r0
 800251a:	4402      	add	r2, r0
 800251c:	4293      	cmp	r3, r2
 800251e:	d100      	bne.n	8002522 <memset+0xa>
 8002520:	4770      	bx	lr
 8002522:	f803 1b01 	strb.w	r1, [r3], #1
 8002526:	e7f9      	b.n	800251c <memset+0x4>

08002528 <__errno>:
 8002528:	4b01      	ldr	r3, [pc, #4]	@ (8002530 <__errno+0x8>)
 800252a:	6818      	ldr	r0, [r3, #0]
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	2000000c 	.word	0x2000000c

08002534 <__libc_init_array>:
 8002534:	b570      	push	{r4, r5, r6, lr}
 8002536:	2600      	movs	r6, #0
 8002538:	4d0c      	ldr	r5, [pc, #48]	@ (800256c <__libc_init_array+0x38>)
 800253a:	4c0d      	ldr	r4, [pc, #52]	@ (8002570 <__libc_init_array+0x3c>)
 800253c:	1b64      	subs	r4, r4, r5
 800253e:	10a4      	asrs	r4, r4, #2
 8002540:	42a6      	cmp	r6, r4
 8002542:	d109      	bne.n	8002558 <__libc_init_array+0x24>
 8002544:	f000 fc78 	bl	8002e38 <_init>
 8002548:	2600      	movs	r6, #0
 800254a:	4d0a      	ldr	r5, [pc, #40]	@ (8002574 <__libc_init_array+0x40>)
 800254c:	4c0a      	ldr	r4, [pc, #40]	@ (8002578 <__libc_init_array+0x44>)
 800254e:	1b64      	subs	r4, r4, r5
 8002550:	10a4      	asrs	r4, r4, #2
 8002552:	42a6      	cmp	r6, r4
 8002554:	d105      	bne.n	8002562 <__libc_init_array+0x2e>
 8002556:	bd70      	pop	{r4, r5, r6, pc}
 8002558:	f855 3b04 	ldr.w	r3, [r5], #4
 800255c:	4798      	blx	r3
 800255e:	3601      	adds	r6, #1
 8002560:	e7ee      	b.n	8002540 <__libc_init_array+0xc>
 8002562:	f855 3b04 	ldr.w	r3, [r5], #4
 8002566:	4798      	blx	r3
 8002568:	3601      	adds	r6, #1
 800256a:	e7f2      	b.n	8002552 <__libc_init_array+0x1e>
 800256c:	08002ec8 	.word	0x08002ec8
 8002570:	08002ec8 	.word	0x08002ec8
 8002574:	08002ec8 	.word	0x08002ec8
 8002578:	08002ecc 	.word	0x08002ecc

0800257c <__retarget_lock_acquire_recursive>:
 800257c:	4770      	bx	lr

0800257e <__retarget_lock_release_recursive>:
 800257e:	4770      	bx	lr

08002580 <_free_r>:
 8002580:	b538      	push	{r3, r4, r5, lr}
 8002582:	4605      	mov	r5, r0
 8002584:	2900      	cmp	r1, #0
 8002586:	d040      	beq.n	800260a <_free_r+0x8a>
 8002588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800258c:	1f0c      	subs	r4, r1, #4
 800258e:	2b00      	cmp	r3, #0
 8002590:	bfb8      	it	lt
 8002592:	18e4      	addlt	r4, r4, r3
 8002594:	f000 f8de 	bl	8002754 <__malloc_lock>
 8002598:	4a1c      	ldr	r2, [pc, #112]	@ (800260c <_free_r+0x8c>)
 800259a:	6813      	ldr	r3, [r2, #0]
 800259c:	b933      	cbnz	r3, 80025ac <_free_r+0x2c>
 800259e:	6063      	str	r3, [r4, #4]
 80025a0:	6014      	str	r4, [r2, #0]
 80025a2:	4628      	mov	r0, r5
 80025a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025a8:	f000 b8da 	b.w	8002760 <__malloc_unlock>
 80025ac:	42a3      	cmp	r3, r4
 80025ae:	d908      	bls.n	80025c2 <_free_r+0x42>
 80025b0:	6820      	ldr	r0, [r4, #0]
 80025b2:	1821      	adds	r1, r4, r0
 80025b4:	428b      	cmp	r3, r1
 80025b6:	bf01      	itttt	eq
 80025b8:	6819      	ldreq	r1, [r3, #0]
 80025ba:	685b      	ldreq	r3, [r3, #4]
 80025bc:	1809      	addeq	r1, r1, r0
 80025be:	6021      	streq	r1, [r4, #0]
 80025c0:	e7ed      	b.n	800259e <_free_r+0x1e>
 80025c2:	461a      	mov	r2, r3
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	b10b      	cbz	r3, 80025cc <_free_r+0x4c>
 80025c8:	42a3      	cmp	r3, r4
 80025ca:	d9fa      	bls.n	80025c2 <_free_r+0x42>
 80025cc:	6811      	ldr	r1, [r2, #0]
 80025ce:	1850      	adds	r0, r2, r1
 80025d0:	42a0      	cmp	r0, r4
 80025d2:	d10b      	bne.n	80025ec <_free_r+0x6c>
 80025d4:	6820      	ldr	r0, [r4, #0]
 80025d6:	4401      	add	r1, r0
 80025d8:	1850      	adds	r0, r2, r1
 80025da:	4283      	cmp	r3, r0
 80025dc:	6011      	str	r1, [r2, #0]
 80025de:	d1e0      	bne.n	80025a2 <_free_r+0x22>
 80025e0:	6818      	ldr	r0, [r3, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4408      	add	r0, r1
 80025e6:	6010      	str	r0, [r2, #0]
 80025e8:	6053      	str	r3, [r2, #4]
 80025ea:	e7da      	b.n	80025a2 <_free_r+0x22>
 80025ec:	d902      	bls.n	80025f4 <_free_r+0x74>
 80025ee:	230c      	movs	r3, #12
 80025f0:	602b      	str	r3, [r5, #0]
 80025f2:	e7d6      	b.n	80025a2 <_free_r+0x22>
 80025f4:	6820      	ldr	r0, [r4, #0]
 80025f6:	1821      	adds	r1, r4, r0
 80025f8:	428b      	cmp	r3, r1
 80025fa:	bf01      	itttt	eq
 80025fc:	6819      	ldreq	r1, [r3, #0]
 80025fe:	685b      	ldreq	r3, [r3, #4]
 8002600:	1809      	addeq	r1, r1, r0
 8002602:	6021      	streq	r1, [r4, #0]
 8002604:	6063      	str	r3, [r4, #4]
 8002606:	6054      	str	r4, [r2, #4]
 8002608:	e7cb      	b.n	80025a2 <_free_r+0x22>
 800260a:	bd38      	pop	{r3, r4, r5, pc}
 800260c:	200002f4 	.word	0x200002f4

08002610 <sbrk_aligned>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	4e0f      	ldr	r6, [pc, #60]	@ (8002650 <sbrk_aligned+0x40>)
 8002614:	460c      	mov	r4, r1
 8002616:	6831      	ldr	r1, [r6, #0]
 8002618:	4605      	mov	r5, r0
 800261a:	b911      	cbnz	r1, 8002622 <sbrk_aligned+0x12>
 800261c:	f000 fbaa 	bl	8002d74 <_sbrk_r>
 8002620:	6030      	str	r0, [r6, #0]
 8002622:	4621      	mov	r1, r4
 8002624:	4628      	mov	r0, r5
 8002626:	f000 fba5 	bl	8002d74 <_sbrk_r>
 800262a:	1c43      	adds	r3, r0, #1
 800262c:	d103      	bne.n	8002636 <sbrk_aligned+0x26>
 800262e:	f04f 34ff 	mov.w	r4, #4294967295
 8002632:	4620      	mov	r0, r4
 8002634:	bd70      	pop	{r4, r5, r6, pc}
 8002636:	1cc4      	adds	r4, r0, #3
 8002638:	f024 0403 	bic.w	r4, r4, #3
 800263c:	42a0      	cmp	r0, r4
 800263e:	d0f8      	beq.n	8002632 <sbrk_aligned+0x22>
 8002640:	1a21      	subs	r1, r4, r0
 8002642:	4628      	mov	r0, r5
 8002644:	f000 fb96 	bl	8002d74 <_sbrk_r>
 8002648:	3001      	adds	r0, #1
 800264a:	d1f2      	bne.n	8002632 <sbrk_aligned+0x22>
 800264c:	e7ef      	b.n	800262e <sbrk_aligned+0x1e>
 800264e:	bf00      	nop
 8002650:	200002f0 	.word	0x200002f0

08002654 <_malloc_r>:
 8002654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002658:	1ccd      	adds	r5, r1, #3
 800265a:	f025 0503 	bic.w	r5, r5, #3
 800265e:	3508      	adds	r5, #8
 8002660:	2d0c      	cmp	r5, #12
 8002662:	bf38      	it	cc
 8002664:	250c      	movcc	r5, #12
 8002666:	2d00      	cmp	r5, #0
 8002668:	4606      	mov	r6, r0
 800266a:	db01      	blt.n	8002670 <_malloc_r+0x1c>
 800266c:	42a9      	cmp	r1, r5
 800266e:	d904      	bls.n	800267a <_malloc_r+0x26>
 8002670:	230c      	movs	r3, #12
 8002672:	6033      	str	r3, [r6, #0]
 8002674:	2000      	movs	r0, #0
 8002676:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800267a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002750 <_malloc_r+0xfc>
 800267e:	f000 f869 	bl	8002754 <__malloc_lock>
 8002682:	f8d8 3000 	ldr.w	r3, [r8]
 8002686:	461c      	mov	r4, r3
 8002688:	bb44      	cbnz	r4, 80026dc <_malloc_r+0x88>
 800268a:	4629      	mov	r1, r5
 800268c:	4630      	mov	r0, r6
 800268e:	f7ff ffbf 	bl	8002610 <sbrk_aligned>
 8002692:	1c43      	adds	r3, r0, #1
 8002694:	4604      	mov	r4, r0
 8002696:	d158      	bne.n	800274a <_malloc_r+0xf6>
 8002698:	f8d8 4000 	ldr.w	r4, [r8]
 800269c:	4627      	mov	r7, r4
 800269e:	2f00      	cmp	r7, #0
 80026a0:	d143      	bne.n	800272a <_malloc_r+0xd6>
 80026a2:	2c00      	cmp	r4, #0
 80026a4:	d04b      	beq.n	800273e <_malloc_r+0xea>
 80026a6:	6823      	ldr	r3, [r4, #0]
 80026a8:	4639      	mov	r1, r7
 80026aa:	4630      	mov	r0, r6
 80026ac:	eb04 0903 	add.w	r9, r4, r3
 80026b0:	f000 fb60 	bl	8002d74 <_sbrk_r>
 80026b4:	4581      	cmp	r9, r0
 80026b6:	d142      	bne.n	800273e <_malloc_r+0xea>
 80026b8:	6821      	ldr	r1, [r4, #0]
 80026ba:	4630      	mov	r0, r6
 80026bc:	1a6d      	subs	r5, r5, r1
 80026be:	4629      	mov	r1, r5
 80026c0:	f7ff ffa6 	bl	8002610 <sbrk_aligned>
 80026c4:	3001      	adds	r0, #1
 80026c6:	d03a      	beq.n	800273e <_malloc_r+0xea>
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	442b      	add	r3, r5
 80026cc:	6023      	str	r3, [r4, #0]
 80026ce:	f8d8 3000 	ldr.w	r3, [r8]
 80026d2:	685a      	ldr	r2, [r3, #4]
 80026d4:	bb62      	cbnz	r2, 8002730 <_malloc_r+0xdc>
 80026d6:	f8c8 7000 	str.w	r7, [r8]
 80026da:	e00f      	b.n	80026fc <_malloc_r+0xa8>
 80026dc:	6822      	ldr	r2, [r4, #0]
 80026de:	1b52      	subs	r2, r2, r5
 80026e0:	d420      	bmi.n	8002724 <_malloc_r+0xd0>
 80026e2:	2a0b      	cmp	r2, #11
 80026e4:	d917      	bls.n	8002716 <_malloc_r+0xc2>
 80026e6:	1961      	adds	r1, r4, r5
 80026e8:	42a3      	cmp	r3, r4
 80026ea:	6025      	str	r5, [r4, #0]
 80026ec:	bf18      	it	ne
 80026ee:	6059      	strne	r1, [r3, #4]
 80026f0:	6863      	ldr	r3, [r4, #4]
 80026f2:	bf08      	it	eq
 80026f4:	f8c8 1000 	streq.w	r1, [r8]
 80026f8:	5162      	str	r2, [r4, r5]
 80026fa:	604b      	str	r3, [r1, #4]
 80026fc:	4630      	mov	r0, r6
 80026fe:	f000 f82f 	bl	8002760 <__malloc_unlock>
 8002702:	f104 000b 	add.w	r0, r4, #11
 8002706:	1d23      	adds	r3, r4, #4
 8002708:	f020 0007 	bic.w	r0, r0, #7
 800270c:	1ac2      	subs	r2, r0, r3
 800270e:	bf1c      	itt	ne
 8002710:	1a1b      	subne	r3, r3, r0
 8002712:	50a3      	strne	r3, [r4, r2]
 8002714:	e7af      	b.n	8002676 <_malloc_r+0x22>
 8002716:	6862      	ldr	r2, [r4, #4]
 8002718:	42a3      	cmp	r3, r4
 800271a:	bf0c      	ite	eq
 800271c:	f8c8 2000 	streq.w	r2, [r8]
 8002720:	605a      	strne	r2, [r3, #4]
 8002722:	e7eb      	b.n	80026fc <_malloc_r+0xa8>
 8002724:	4623      	mov	r3, r4
 8002726:	6864      	ldr	r4, [r4, #4]
 8002728:	e7ae      	b.n	8002688 <_malloc_r+0x34>
 800272a:	463c      	mov	r4, r7
 800272c:	687f      	ldr	r7, [r7, #4]
 800272e:	e7b6      	b.n	800269e <_malloc_r+0x4a>
 8002730:	461a      	mov	r2, r3
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	42a3      	cmp	r3, r4
 8002736:	d1fb      	bne.n	8002730 <_malloc_r+0xdc>
 8002738:	2300      	movs	r3, #0
 800273a:	6053      	str	r3, [r2, #4]
 800273c:	e7de      	b.n	80026fc <_malloc_r+0xa8>
 800273e:	230c      	movs	r3, #12
 8002740:	4630      	mov	r0, r6
 8002742:	6033      	str	r3, [r6, #0]
 8002744:	f000 f80c 	bl	8002760 <__malloc_unlock>
 8002748:	e794      	b.n	8002674 <_malloc_r+0x20>
 800274a:	6005      	str	r5, [r0, #0]
 800274c:	e7d6      	b.n	80026fc <_malloc_r+0xa8>
 800274e:	bf00      	nop
 8002750:	200002f4 	.word	0x200002f4

08002754 <__malloc_lock>:
 8002754:	4801      	ldr	r0, [pc, #4]	@ (800275c <__malloc_lock+0x8>)
 8002756:	f7ff bf11 	b.w	800257c <__retarget_lock_acquire_recursive>
 800275a:	bf00      	nop
 800275c:	200002ec 	.word	0x200002ec

08002760 <__malloc_unlock>:
 8002760:	4801      	ldr	r0, [pc, #4]	@ (8002768 <__malloc_unlock+0x8>)
 8002762:	f7ff bf0c 	b.w	800257e <__retarget_lock_release_recursive>
 8002766:	bf00      	nop
 8002768:	200002ec 	.word	0x200002ec

0800276c <__ssputs_r>:
 800276c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002770:	461f      	mov	r7, r3
 8002772:	688e      	ldr	r6, [r1, #8]
 8002774:	4682      	mov	sl, r0
 8002776:	42be      	cmp	r6, r7
 8002778:	460c      	mov	r4, r1
 800277a:	4690      	mov	r8, r2
 800277c:	680b      	ldr	r3, [r1, #0]
 800277e:	d82d      	bhi.n	80027dc <__ssputs_r+0x70>
 8002780:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002784:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002788:	d026      	beq.n	80027d8 <__ssputs_r+0x6c>
 800278a:	6965      	ldr	r5, [r4, #20]
 800278c:	6909      	ldr	r1, [r1, #16]
 800278e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002792:	eba3 0901 	sub.w	r9, r3, r1
 8002796:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800279a:	1c7b      	adds	r3, r7, #1
 800279c:	444b      	add	r3, r9
 800279e:	106d      	asrs	r5, r5, #1
 80027a0:	429d      	cmp	r5, r3
 80027a2:	bf38      	it	cc
 80027a4:	461d      	movcc	r5, r3
 80027a6:	0553      	lsls	r3, r2, #21
 80027a8:	d527      	bpl.n	80027fa <__ssputs_r+0x8e>
 80027aa:	4629      	mov	r1, r5
 80027ac:	f7ff ff52 	bl	8002654 <_malloc_r>
 80027b0:	4606      	mov	r6, r0
 80027b2:	b360      	cbz	r0, 800280e <__ssputs_r+0xa2>
 80027b4:	464a      	mov	r2, r9
 80027b6:	6921      	ldr	r1, [r4, #16]
 80027b8:	f000 fafa 	bl	8002db0 <memcpy>
 80027bc:	89a3      	ldrh	r3, [r4, #12]
 80027be:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80027c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c6:	81a3      	strh	r3, [r4, #12]
 80027c8:	6126      	str	r6, [r4, #16]
 80027ca:	444e      	add	r6, r9
 80027cc:	6026      	str	r6, [r4, #0]
 80027ce:	463e      	mov	r6, r7
 80027d0:	6165      	str	r5, [r4, #20]
 80027d2:	eba5 0509 	sub.w	r5, r5, r9
 80027d6:	60a5      	str	r5, [r4, #8]
 80027d8:	42be      	cmp	r6, r7
 80027da:	d900      	bls.n	80027de <__ssputs_r+0x72>
 80027dc:	463e      	mov	r6, r7
 80027de:	4632      	mov	r2, r6
 80027e0:	4641      	mov	r1, r8
 80027e2:	6820      	ldr	r0, [r4, #0]
 80027e4:	f000 faac 	bl	8002d40 <memmove>
 80027e8:	2000      	movs	r0, #0
 80027ea:	68a3      	ldr	r3, [r4, #8]
 80027ec:	1b9b      	subs	r3, r3, r6
 80027ee:	60a3      	str	r3, [r4, #8]
 80027f0:	6823      	ldr	r3, [r4, #0]
 80027f2:	4433      	add	r3, r6
 80027f4:	6023      	str	r3, [r4, #0]
 80027f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027fa:	462a      	mov	r2, r5
 80027fc:	f000 fae6 	bl	8002dcc <_realloc_r>
 8002800:	4606      	mov	r6, r0
 8002802:	2800      	cmp	r0, #0
 8002804:	d1e0      	bne.n	80027c8 <__ssputs_r+0x5c>
 8002806:	4650      	mov	r0, sl
 8002808:	6921      	ldr	r1, [r4, #16]
 800280a:	f7ff feb9 	bl	8002580 <_free_r>
 800280e:	230c      	movs	r3, #12
 8002810:	f8ca 3000 	str.w	r3, [sl]
 8002814:	89a3      	ldrh	r3, [r4, #12]
 8002816:	f04f 30ff 	mov.w	r0, #4294967295
 800281a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800281e:	81a3      	strh	r3, [r4, #12]
 8002820:	e7e9      	b.n	80027f6 <__ssputs_r+0x8a>
	...

08002824 <_svfiprintf_r>:
 8002824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002828:	4698      	mov	r8, r3
 800282a:	898b      	ldrh	r3, [r1, #12]
 800282c:	4607      	mov	r7, r0
 800282e:	061b      	lsls	r3, r3, #24
 8002830:	460d      	mov	r5, r1
 8002832:	4614      	mov	r4, r2
 8002834:	b09d      	sub	sp, #116	@ 0x74
 8002836:	d510      	bpl.n	800285a <_svfiprintf_r+0x36>
 8002838:	690b      	ldr	r3, [r1, #16]
 800283a:	b973      	cbnz	r3, 800285a <_svfiprintf_r+0x36>
 800283c:	2140      	movs	r1, #64	@ 0x40
 800283e:	f7ff ff09 	bl	8002654 <_malloc_r>
 8002842:	6028      	str	r0, [r5, #0]
 8002844:	6128      	str	r0, [r5, #16]
 8002846:	b930      	cbnz	r0, 8002856 <_svfiprintf_r+0x32>
 8002848:	230c      	movs	r3, #12
 800284a:	603b      	str	r3, [r7, #0]
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	b01d      	add	sp, #116	@ 0x74
 8002852:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002856:	2340      	movs	r3, #64	@ 0x40
 8002858:	616b      	str	r3, [r5, #20]
 800285a:	2300      	movs	r3, #0
 800285c:	9309      	str	r3, [sp, #36]	@ 0x24
 800285e:	2320      	movs	r3, #32
 8002860:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002864:	2330      	movs	r3, #48	@ 0x30
 8002866:	f04f 0901 	mov.w	r9, #1
 800286a:	f8cd 800c 	str.w	r8, [sp, #12]
 800286e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8002a08 <_svfiprintf_r+0x1e4>
 8002872:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002876:	4623      	mov	r3, r4
 8002878:	469a      	mov	sl, r3
 800287a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800287e:	b10a      	cbz	r2, 8002884 <_svfiprintf_r+0x60>
 8002880:	2a25      	cmp	r2, #37	@ 0x25
 8002882:	d1f9      	bne.n	8002878 <_svfiprintf_r+0x54>
 8002884:	ebba 0b04 	subs.w	fp, sl, r4
 8002888:	d00b      	beq.n	80028a2 <_svfiprintf_r+0x7e>
 800288a:	465b      	mov	r3, fp
 800288c:	4622      	mov	r2, r4
 800288e:	4629      	mov	r1, r5
 8002890:	4638      	mov	r0, r7
 8002892:	f7ff ff6b 	bl	800276c <__ssputs_r>
 8002896:	3001      	adds	r0, #1
 8002898:	f000 80a7 	beq.w	80029ea <_svfiprintf_r+0x1c6>
 800289c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800289e:	445a      	add	r2, fp
 80028a0:	9209      	str	r2, [sp, #36]	@ 0x24
 80028a2:	f89a 3000 	ldrb.w	r3, [sl]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	f000 809f 	beq.w	80029ea <_svfiprintf_r+0x1c6>
 80028ac:	2300      	movs	r3, #0
 80028ae:	f04f 32ff 	mov.w	r2, #4294967295
 80028b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80028b6:	f10a 0a01 	add.w	sl, sl, #1
 80028ba:	9304      	str	r3, [sp, #16]
 80028bc:	9307      	str	r3, [sp, #28]
 80028be:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80028c2:	931a      	str	r3, [sp, #104]	@ 0x68
 80028c4:	4654      	mov	r4, sl
 80028c6:	2205      	movs	r2, #5
 80028c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80028cc:	484e      	ldr	r0, [pc, #312]	@ (8002a08 <_svfiprintf_r+0x1e4>)
 80028ce:	f000 fa61 	bl	8002d94 <memchr>
 80028d2:	9a04      	ldr	r2, [sp, #16]
 80028d4:	b9d8      	cbnz	r0, 800290e <_svfiprintf_r+0xea>
 80028d6:	06d0      	lsls	r0, r2, #27
 80028d8:	bf44      	itt	mi
 80028da:	2320      	movmi	r3, #32
 80028dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028e0:	0711      	lsls	r1, r2, #28
 80028e2:	bf44      	itt	mi
 80028e4:	232b      	movmi	r3, #43	@ 0x2b
 80028e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80028ea:	f89a 3000 	ldrb.w	r3, [sl]
 80028ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80028f0:	d015      	beq.n	800291e <_svfiprintf_r+0xfa>
 80028f2:	4654      	mov	r4, sl
 80028f4:	2000      	movs	r0, #0
 80028f6:	f04f 0c0a 	mov.w	ip, #10
 80028fa:	9a07      	ldr	r2, [sp, #28]
 80028fc:	4621      	mov	r1, r4
 80028fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002902:	3b30      	subs	r3, #48	@ 0x30
 8002904:	2b09      	cmp	r3, #9
 8002906:	d94b      	bls.n	80029a0 <_svfiprintf_r+0x17c>
 8002908:	b1b0      	cbz	r0, 8002938 <_svfiprintf_r+0x114>
 800290a:	9207      	str	r2, [sp, #28]
 800290c:	e014      	b.n	8002938 <_svfiprintf_r+0x114>
 800290e:	eba0 0308 	sub.w	r3, r0, r8
 8002912:	fa09 f303 	lsl.w	r3, r9, r3
 8002916:	4313      	orrs	r3, r2
 8002918:	46a2      	mov	sl, r4
 800291a:	9304      	str	r3, [sp, #16]
 800291c:	e7d2      	b.n	80028c4 <_svfiprintf_r+0xa0>
 800291e:	9b03      	ldr	r3, [sp, #12]
 8002920:	1d19      	adds	r1, r3, #4
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	9103      	str	r1, [sp, #12]
 8002926:	2b00      	cmp	r3, #0
 8002928:	bfbb      	ittet	lt
 800292a:	425b      	neglt	r3, r3
 800292c:	f042 0202 	orrlt.w	r2, r2, #2
 8002930:	9307      	strge	r3, [sp, #28]
 8002932:	9307      	strlt	r3, [sp, #28]
 8002934:	bfb8      	it	lt
 8002936:	9204      	strlt	r2, [sp, #16]
 8002938:	7823      	ldrb	r3, [r4, #0]
 800293a:	2b2e      	cmp	r3, #46	@ 0x2e
 800293c:	d10a      	bne.n	8002954 <_svfiprintf_r+0x130>
 800293e:	7863      	ldrb	r3, [r4, #1]
 8002940:	2b2a      	cmp	r3, #42	@ 0x2a
 8002942:	d132      	bne.n	80029aa <_svfiprintf_r+0x186>
 8002944:	9b03      	ldr	r3, [sp, #12]
 8002946:	3402      	adds	r4, #2
 8002948:	1d1a      	adds	r2, r3, #4
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	9203      	str	r2, [sp, #12]
 800294e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002952:	9305      	str	r3, [sp, #20]
 8002954:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8002a0c <_svfiprintf_r+0x1e8>
 8002958:	2203      	movs	r2, #3
 800295a:	4650      	mov	r0, sl
 800295c:	7821      	ldrb	r1, [r4, #0]
 800295e:	f000 fa19 	bl	8002d94 <memchr>
 8002962:	b138      	cbz	r0, 8002974 <_svfiprintf_r+0x150>
 8002964:	2240      	movs	r2, #64	@ 0x40
 8002966:	9b04      	ldr	r3, [sp, #16]
 8002968:	eba0 000a 	sub.w	r0, r0, sl
 800296c:	4082      	lsls	r2, r0
 800296e:	4313      	orrs	r3, r2
 8002970:	3401      	adds	r4, #1
 8002972:	9304      	str	r3, [sp, #16]
 8002974:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002978:	2206      	movs	r2, #6
 800297a:	4825      	ldr	r0, [pc, #148]	@ (8002a10 <_svfiprintf_r+0x1ec>)
 800297c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002980:	f000 fa08 	bl	8002d94 <memchr>
 8002984:	2800      	cmp	r0, #0
 8002986:	d036      	beq.n	80029f6 <_svfiprintf_r+0x1d2>
 8002988:	4b22      	ldr	r3, [pc, #136]	@ (8002a14 <_svfiprintf_r+0x1f0>)
 800298a:	bb1b      	cbnz	r3, 80029d4 <_svfiprintf_r+0x1b0>
 800298c:	9b03      	ldr	r3, [sp, #12]
 800298e:	3307      	adds	r3, #7
 8002990:	f023 0307 	bic.w	r3, r3, #7
 8002994:	3308      	adds	r3, #8
 8002996:	9303      	str	r3, [sp, #12]
 8002998:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800299a:	4433      	add	r3, r6
 800299c:	9309      	str	r3, [sp, #36]	@ 0x24
 800299e:	e76a      	b.n	8002876 <_svfiprintf_r+0x52>
 80029a0:	460c      	mov	r4, r1
 80029a2:	2001      	movs	r0, #1
 80029a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80029a8:	e7a8      	b.n	80028fc <_svfiprintf_r+0xd8>
 80029aa:	2300      	movs	r3, #0
 80029ac:	f04f 0c0a 	mov.w	ip, #10
 80029b0:	4619      	mov	r1, r3
 80029b2:	3401      	adds	r4, #1
 80029b4:	9305      	str	r3, [sp, #20]
 80029b6:	4620      	mov	r0, r4
 80029b8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80029bc:	3a30      	subs	r2, #48	@ 0x30
 80029be:	2a09      	cmp	r2, #9
 80029c0:	d903      	bls.n	80029ca <_svfiprintf_r+0x1a6>
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d0c6      	beq.n	8002954 <_svfiprintf_r+0x130>
 80029c6:	9105      	str	r1, [sp, #20]
 80029c8:	e7c4      	b.n	8002954 <_svfiprintf_r+0x130>
 80029ca:	4604      	mov	r4, r0
 80029cc:	2301      	movs	r3, #1
 80029ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80029d2:	e7f0      	b.n	80029b6 <_svfiprintf_r+0x192>
 80029d4:	ab03      	add	r3, sp, #12
 80029d6:	9300      	str	r3, [sp, #0]
 80029d8:	462a      	mov	r2, r5
 80029da:	4638      	mov	r0, r7
 80029dc:	4b0e      	ldr	r3, [pc, #56]	@ (8002a18 <_svfiprintf_r+0x1f4>)
 80029de:	a904      	add	r1, sp, #16
 80029e0:	f3af 8000 	nop.w
 80029e4:	1c42      	adds	r2, r0, #1
 80029e6:	4606      	mov	r6, r0
 80029e8:	d1d6      	bne.n	8002998 <_svfiprintf_r+0x174>
 80029ea:	89ab      	ldrh	r3, [r5, #12]
 80029ec:	065b      	lsls	r3, r3, #25
 80029ee:	f53f af2d 	bmi.w	800284c <_svfiprintf_r+0x28>
 80029f2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80029f4:	e72c      	b.n	8002850 <_svfiprintf_r+0x2c>
 80029f6:	ab03      	add	r3, sp, #12
 80029f8:	9300      	str	r3, [sp, #0]
 80029fa:	462a      	mov	r2, r5
 80029fc:	4638      	mov	r0, r7
 80029fe:	4b06      	ldr	r3, [pc, #24]	@ (8002a18 <_svfiprintf_r+0x1f4>)
 8002a00:	a904      	add	r1, sp, #16
 8002a02:	f000 f87d 	bl	8002b00 <_printf_i>
 8002a06:	e7ed      	b.n	80029e4 <_svfiprintf_r+0x1c0>
 8002a08:	08002e8a 	.word	0x08002e8a
 8002a0c:	08002e90 	.word	0x08002e90
 8002a10:	08002e94 	.word	0x08002e94
 8002a14:	00000000 	.word	0x00000000
 8002a18:	0800276d 	.word	0x0800276d

08002a1c <_printf_common>:
 8002a1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002a20:	4616      	mov	r6, r2
 8002a22:	4698      	mov	r8, r3
 8002a24:	688a      	ldr	r2, [r1, #8]
 8002a26:	690b      	ldr	r3, [r1, #16]
 8002a28:	4607      	mov	r7, r0
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	bfb8      	it	lt
 8002a2e:	4613      	movlt	r3, r2
 8002a30:	6033      	str	r3, [r6, #0]
 8002a32:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002a36:	460c      	mov	r4, r1
 8002a38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002a3c:	b10a      	cbz	r2, 8002a42 <_printf_common+0x26>
 8002a3e:	3301      	adds	r3, #1
 8002a40:	6033      	str	r3, [r6, #0]
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	0699      	lsls	r1, r3, #26
 8002a46:	bf42      	ittt	mi
 8002a48:	6833      	ldrmi	r3, [r6, #0]
 8002a4a:	3302      	addmi	r3, #2
 8002a4c:	6033      	strmi	r3, [r6, #0]
 8002a4e:	6825      	ldr	r5, [r4, #0]
 8002a50:	f015 0506 	ands.w	r5, r5, #6
 8002a54:	d106      	bne.n	8002a64 <_printf_common+0x48>
 8002a56:	f104 0a19 	add.w	sl, r4, #25
 8002a5a:	68e3      	ldr	r3, [r4, #12]
 8002a5c:	6832      	ldr	r2, [r6, #0]
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	42ab      	cmp	r3, r5
 8002a62:	dc2b      	bgt.n	8002abc <_printf_common+0xa0>
 8002a64:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002a68:	6822      	ldr	r2, [r4, #0]
 8002a6a:	3b00      	subs	r3, #0
 8002a6c:	bf18      	it	ne
 8002a6e:	2301      	movne	r3, #1
 8002a70:	0692      	lsls	r2, r2, #26
 8002a72:	d430      	bmi.n	8002ad6 <_printf_common+0xba>
 8002a74:	4641      	mov	r1, r8
 8002a76:	4638      	mov	r0, r7
 8002a78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002a7c:	47c8      	blx	r9
 8002a7e:	3001      	adds	r0, #1
 8002a80:	d023      	beq.n	8002aca <_printf_common+0xae>
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	6922      	ldr	r2, [r4, #16]
 8002a86:	f003 0306 	and.w	r3, r3, #6
 8002a8a:	2b04      	cmp	r3, #4
 8002a8c:	bf14      	ite	ne
 8002a8e:	2500      	movne	r5, #0
 8002a90:	6833      	ldreq	r3, [r6, #0]
 8002a92:	f04f 0600 	mov.w	r6, #0
 8002a96:	bf08      	it	eq
 8002a98:	68e5      	ldreq	r5, [r4, #12]
 8002a9a:	f104 041a 	add.w	r4, r4, #26
 8002a9e:	bf08      	it	eq
 8002aa0:	1aed      	subeq	r5, r5, r3
 8002aa2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002aa6:	bf08      	it	eq
 8002aa8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002aac:	4293      	cmp	r3, r2
 8002aae:	bfc4      	itt	gt
 8002ab0:	1a9b      	subgt	r3, r3, r2
 8002ab2:	18ed      	addgt	r5, r5, r3
 8002ab4:	42b5      	cmp	r5, r6
 8002ab6:	d11a      	bne.n	8002aee <_printf_common+0xd2>
 8002ab8:	2000      	movs	r0, #0
 8002aba:	e008      	b.n	8002ace <_printf_common+0xb2>
 8002abc:	2301      	movs	r3, #1
 8002abe:	4652      	mov	r2, sl
 8002ac0:	4641      	mov	r1, r8
 8002ac2:	4638      	mov	r0, r7
 8002ac4:	47c8      	blx	r9
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	d103      	bne.n	8002ad2 <_printf_common+0xb6>
 8002aca:	f04f 30ff 	mov.w	r0, #4294967295
 8002ace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002ad2:	3501      	adds	r5, #1
 8002ad4:	e7c1      	b.n	8002a5a <_printf_common+0x3e>
 8002ad6:	2030      	movs	r0, #48	@ 0x30
 8002ad8:	18e1      	adds	r1, r4, r3
 8002ada:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002ade:	1c5a      	adds	r2, r3, #1
 8002ae0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002ae4:	4422      	add	r2, r4
 8002ae6:	3302      	adds	r3, #2
 8002ae8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002aec:	e7c2      	b.n	8002a74 <_printf_common+0x58>
 8002aee:	2301      	movs	r3, #1
 8002af0:	4622      	mov	r2, r4
 8002af2:	4641      	mov	r1, r8
 8002af4:	4638      	mov	r0, r7
 8002af6:	47c8      	blx	r9
 8002af8:	3001      	adds	r0, #1
 8002afa:	d0e6      	beq.n	8002aca <_printf_common+0xae>
 8002afc:	3601      	adds	r6, #1
 8002afe:	e7d9      	b.n	8002ab4 <_printf_common+0x98>

08002b00 <_printf_i>:
 8002b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002b04:	7e0f      	ldrb	r7, [r1, #24]
 8002b06:	4691      	mov	r9, r2
 8002b08:	2f78      	cmp	r7, #120	@ 0x78
 8002b0a:	4680      	mov	r8, r0
 8002b0c:	460c      	mov	r4, r1
 8002b0e:	469a      	mov	sl, r3
 8002b10:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002b12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002b16:	d807      	bhi.n	8002b28 <_printf_i+0x28>
 8002b18:	2f62      	cmp	r7, #98	@ 0x62
 8002b1a:	d80a      	bhi.n	8002b32 <_printf_i+0x32>
 8002b1c:	2f00      	cmp	r7, #0
 8002b1e:	f000 80d3 	beq.w	8002cc8 <_printf_i+0x1c8>
 8002b22:	2f58      	cmp	r7, #88	@ 0x58
 8002b24:	f000 80ba 	beq.w	8002c9c <_printf_i+0x19c>
 8002b28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002b2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002b30:	e03a      	b.n	8002ba8 <_printf_i+0xa8>
 8002b32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002b36:	2b15      	cmp	r3, #21
 8002b38:	d8f6      	bhi.n	8002b28 <_printf_i+0x28>
 8002b3a:	a101      	add	r1, pc, #4	@ (adr r1, 8002b40 <_printf_i+0x40>)
 8002b3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002b40:	08002b99 	.word	0x08002b99
 8002b44:	08002bad 	.word	0x08002bad
 8002b48:	08002b29 	.word	0x08002b29
 8002b4c:	08002b29 	.word	0x08002b29
 8002b50:	08002b29 	.word	0x08002b29
 8002b54:	08002b29 	.word	0x08002b29
 8002b58:	08002bad 	.word	0x08002bad
 8002b5c:	08002b29 	.word	0x08002b29
 8002b60:	08002b29 	.word	0x08002b29
 8002b64:	08002b29 	.word	0x08002b29
 8002b68:	08002b29 	.word	0x08002b29
 8002b6c:	08002caf 	.word	0x08002caf
 8002b70:	08002bd7 	.word	0x08002bd7
 8002b74:	08002c69 	.word	0x08002c69
 8002b78:	08002b29 	.word	0x08002b29
 8002b7c:	08002b29 	.word	0x08002b29
 8002b80:	08002cd1 	.word	0x08002cd1
 8002b84:	08002b29 	.word	0x08002b29
 8002b88:	08002bd7 	.word	0x08002bd7
 8002b8c:	08002b29 	.word	0x08002b29
 8002b90:	08002b29 	.word	0x08002b29
 8002b94:	08002c71 	.word	0x08002c71
 8002b98:	6833      	ldr	r3, [r6, #0]
 8002b9a:	1d1a      	adds	r2, r3, #4
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	6032      	str	r2, [r6, #0]
 8002ba0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ba4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ba8:	2301      	movs	r3, #1
 8002baa:	e09e      	b.n	8002cea <_printf_i+0x1ea>
 8002bac:	6833      	ldr	r3, [r6, #0]
 8002bae:	6820      	ldr	r0, [r4, #0]
 8002bb0:	1d19      	adds	r1, r3, #4
 8002bb2:	6031      	str	r1, [r6, #0]
 8002bb4:	0606      	lsls	r6, r0, #24
 8002bb6:	d501      	bpl.n	8002bbc <_printf_i+0xbc>
 8002bb8:	681d      	ldr	r5, [r3, #0]
 8002bba:	e003      	b.n	8002bc4 <_printf_i+0xc4>
 8002bbc:	0645      	lsls	r5, r0, #25
 8002bbe:	d5fb      	bpl.n	8002bb8 <_printf_i+0xb8>
 8002bc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002bc4:	2d00      	cmp	r5, #0
 8002bc6:	da03      	bge.n	8002bd0 <_printf_i+0xd0>
 8002bc8:	232d      	movs	r3, #45	@ 0x2d
 8002bca:	426d      	negs	r5, r5
 8002bcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002bd0:	230a      	movs	r3, #10
 8002bd2:	4859      	ldr	r0, [pc, #356]	@ (8002d38 <_printf_i+0x238>)
 8002bd4:	e011      	b.n	8002bfa <_printf_i+0xfa>
 8002bd6:	6821      	ldr	r1, [r4, #0]
 8002bd8:	6833      	ldr	r3, [r6, #0]
 8002bda:	0608      	lsls	r0, r1, #24
 8002bdc:	f853 5b04 	ldr.w	r5, [r3], #4
 8002be0:	d402      	bmi.n	8002be8 <_printf_i+0xe8>
 8002be2:	0649      	lsls	r1, r1, #25
 8002be4:	bf48      	it	mi
 8002be6:	b2ad      	uxthmi	r5, r5
 8002be8:	2f6f      	cmp	r7, #111	@ 0x6f
 8002bea:	6033      	str	r3, [r6, #0]
 8002bec:	bf14      	ite	ne
 8002bee:	230a      	movne	r3, #10
 8002bf0:	2308      	moveq	r3, #8
 8002bf2:	4851      	ldr	r0, [pc, #324]	@ (8002d38 <_printf_i+0x238>)
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002bfa:	6866      	ldr	r6, [r4, #4]
 8002bfc:	2e00      	cmp	r6, #0
 8002bfe:	bfa8      	it	ge
 8002c00:	6821      	ldrge	r1, [r4, #0]
 8002c02:	60a6      	str	r6, [r4, #8]
 8002c04:	bfa4      	itt	ge
 8002c06:	f021 0104 	bicge.w	r1, r1, #4
 8002c0a:	6021      	strge	r1, [r4, #0]
 8002c0c:	b90d      	cbnz	r5, 8002c12 <_printf_i+0x112>
 8002c0e:	2e00      	cmp	r6, #0
 8002c10:	d04b      	beq.n	8002caa <_printf_i+0x1aa>
 8002c12:	4616      	mov	r6, r2
 8002c14:	fbb5 f1f3 	udiv	r1, r5, r3
 8002c18:	fb03 5711 	mls	r7, r3, r1, r5
 8002c1c:	5dc7      	ldrb	r7, [r0, r7]
 8002c1e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002c22:	462f      	mov	r7, r5
 8002c24:	42bb      	cmp	r3, r7
 8002c26:	460d      	mov	r5, r1
 8002c28:	d9f4      	bls.n	8002c14 <_printf_i+0x114>
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d10b      	bne.n	8002c46 <_printf_i+0x146>
 8002c2e:	6823      	ldr	r3, [r4, #0]
 8002c30:	07df      	lsls	r7, r3, #31
 8002c32:	d508      	bpl.n	8002c46 <_printf_i+0x146>
 8002c34:	6923      	ldr	r3, [r4, #16]
 8002c36:	6861      	ldr	r1, [r4, #4]
 8002c38:	4299      	cmp	r1, r3
 8002c3a:	bfde      	ittt	le
 8002c3c:	2330      	movle	r3, #48	@ 0x30
 8002c3e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002c42:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002c46:	1b92      	subs	r2, r2, r6
 8002c48:	6122      	str	r2, [r4, #16]
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	4621      	mov	r1, r4
 8002c4e:	4640      	mov	r0, r8
 8002c50:	f8cd a000 	str.w	sl, [sp]
 8002c54:	aa03      	add	r2, sp, #12
 8002c56:	f7ff fee1 	bl	8002a1c <_printf_common>
 8002c5a:	3001      	adds	r0, #1
 8002c5c:	d14a      	bne.n	8002cf4 <_printf_i+0x1f4>
 8002c5e:	f04f 30ff 	mov.w	r0, #4294967295
 8002c62:	b004      	add	sp, #16
 8002c64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c68:	6823      	ldr	r3, [r4, #0]
 8002c6a:	f043 0320 	orr.w	r3, r3, #32
 8002c6e:	6023      	str	r3, [r4, #0]
 8002c70:	2778      	movs	r7, #120	@ 0x78
 8002c72:	4832      	ldr	r0, [pc, #200]	@ (8002d3c <_printf_i+0x23c>)
 8002c74:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002c78:	6823      	ldr	r3, [r4, #0]
 8002c7a:	6831      	ldr	r1, [r6, #0]
 8002c7c:	061f      	lsls	r7, r3, #24
 8002c7e:	f851 5b04 	ldr.w	r5, [r1], #4
 8002c82:	d402      	bmi.n	8002c8a <_printf_i+0x18a>
 8002c84:	065f      	lsls	r7, r3, #25
 8002c86:	bf48      	it	mi
 8002c88:	b2ad      	uxthmi	r5, r5
 8002c8a:	6031      	str	r1, [r6, #0]
 8002c8c:	07d9      	lsls	r1, r3, #31
 8002c8e:	bf44      	itt	mi
 8002c90:	f043 0320 	orrmi.w	r3, r3, #32
 8002c94:	6023      	strmi	r3, [r4, #0]
 8002c96:	b11d      	cbz	r5, 8002ca0 <_printf_i+0x1a0>
 8002c98:	2310      	movs	r3, #16
 8002c9a:	e7ab      	b.n	8002bf4 <_printf_i+0xf4>
 8002c9c:	4826      	ldr	r0, [pc, #152]	@ (8002d38 <_printf_i+0x238>)
 8002c9e:	e7e9      	b.n	8002c74 <_printf_i+0x174>
 8002ca0:	6823      	ldr	r3, [r4, #0]
 8002ca2:	f023 0320 	bic.w	r3, r3, #32
 8002ca6:	6023      	str	r3, [r4, #0]
 8002ca8:	e7f6      	b.n	8002c98 <_printf_i+0x198>
 8002caa:	4616      	mov	r6, r2
 8002cac:	e7bd      	b.n	8002c2a <_printf_i+0x12a>
 8002cae:	6833      	ldr	r3, [r6, #0]
 8002cb0:	6825      	ldr	r5, [r4, #0]
 8002cb2:	1d18      	adds	r0, r3, #4
 8002cb4:	6961      	ldr	r1, [r4, #20]
 8002cb6:	6030      	str	r0, [r6, #0]
 8002cb8:	062e      	lsls	r6, r5, #24
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	d501      	bpl.n	8002cc2 <_printf_i+0x1c2>
 8002cbe:	6019      	str	r1, [r3, #0]
 8002cc0:	e002      	b.n	8002cc8 <_printf_i+0x1c8>
 8002cc2:	0668      	lsls	r0, r5, #25
 8002cc4:	d5fb      	bpl.n	8002cbe <_printf_i+0x1be>
 8002cc6:	8019      	strh	r1, [r3, #0]
 8002cc8:	2300      	movs	r3, #0
 8002cca:	4616      	mov	r6, r2
 8002ccc:	6123      	str	r3, [r4, #16]
 8002cce:	e7bc      	b.n	8002c4a <_printf_i+0x14a>
 8002cd0:	6833      	ldr	r3, [r6, #0]
 8002cd2:	2100      	movs	r1, #0
 8002cd4:	1d1a      	adds	r2, r3, #4
 8002cd6:	6032      	str	r2, [r6, #0]
 8002cd8:	681e      	ldr	r6, [r3, #0]
 8002cda:	6862      	ldr	r2, [r4, #4]
 8002cdc:	4630      	mov	r0, r6
 8002cde:	f000 f859 	bl	8002d94 <memchr>
 8002ce2:	b108      	cbz	r0, 8002ce8 <_printf_i+0x1e8>
 8002ce4:	1b80      	subs	r0, r0, r6
 8002ce6:	6060      	str	r0, [r4, #4]
 8002ce8:	6863      	ldr	r3, [r4, #4]
 8002cea:	6123      	str	r3, [r4, #16]
 8002cec:	2300      	movs	r3, #0
 8002cee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002cf2:	e7aa      	b.n	8002c4a <_printf_i+0x14a>
 8002cf4:	4632      	mov	r2, r6
 8002cf6:	4649      	mov	r1, r9
 8002cf8:	4640      	mov	r0, r8
 8002cfa:	6923      	ldr	r3, [r4, #16]
 8002cfc:	47d0      	blx	sl
 8002cfe:	3001      	adds	r0, #1
 8002d00:	d0ad      	beq.n	8002c5e <_printf_i+0x15e>
 8002d02:	6823      	ldr	r3, [r4, #0]
 8002d04:	079b      	lsls	r3, r3, #30
 8002d06:	d413      	bmi.n	8002d30 <_printf_i+0x230>
 8002d08:	68e0      	ldr	r0, [r4, #12]
 8002d0a:	9b03      	ldr	r3, [sp, #12]
 8002d0c:	4298      	cmp	r0, r3
 8002d0e:	bfb8      	it	lt
 8002d10:	4618      	movlt	r0, r3
 8002d12:	e7a6      	b.n	8002c62 <_printf_i+0x162>
 8002d14:	2301      	movs	r3, #1
 8002d16:	4632      	mov	r2, r6
 8002d18:	4649      	mov	r1, r9
 8002d1a:	4640      	mov	r0, r8
 8002d1c:	47d0      	blx	sl
 8002d1e:	3001      	adds	r0, #1
 8002d20:	d09d      	beq.n	8002c5e <_printf_i+0x15e>
 8002d22:	3501      	adds	r5, #1
 8002d24:	68e3      	ldr	r3, [r4, #12]
 8002d26:	9903      	ldr	r1, [sp, #12]
 8002d28:	1a5b      	subs	r3, r3, r1
 8002d2a:	42ab      	cmp	r3, r5
 8002d2c:	dcf2      	bgt.n	8002d14 <_printf_i+0x214>
 8002d2e:	e7eb      	b.n	8002d08 <_printf_i+0x208>
 8002d30:	2500      	movs	r5, #0
 8002d32:	f104 0619 	add.w	r6, r4, #25
 8002d36:	e7f5      	b.n	8002d24 <_printf_i+0x224>
 8002d38:	08002e9b 	.word	0x08002e9b
 8002d3c:	08002eac 	.word	0x08002eac

08002d40 <memmove>:
 8002d40:	4288      	cmp	r0, r1
 8002d42:	b510      	push	{r4, lr}
 8002d44:	eb01 0402 	add.w	r4, r1, r2
 8002d48:	d902      	bls.n	8002d50 <memmove+0x10>
 8002d4a:	4284      	cmp	r4, r0
 8002d4c:	4623      	mov	r3, r4
 8002d4e:	d807      	bhi.n	8002d60 <memmove+0x20>
 8002d50:	1e43      	subs	r3, r0, #1
 8002d52:	42a1      	cmp	r1, r4
 8002d54:	d008      	beq.n	8002d68 <memmove+0x28>
 8002d56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002d5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002d5e:	e7f8      	b.n	8002d52 <memmove+0x12>
 8002d60:	4601      	mov	r1, r0
 8002d62:	4402      	add	r2, r0
 8002d64:	428a      	cmp	r2, r1
 8002d66:	d100      	bne.n	8002d6a <memmove+0x2a>
 8002d68:	bd10      	pop	{r4, pc}
 8002d6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002d6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002d72:	e7f7      	b.n	8002d64 <memmove+0x24>

08002d74 <_sbrk_r>:
 8002d74:	b538      	push	{r3, r4, r5, lr}
 8002d76:	2300      	movs	r3, #0
 8002d78:	4d05      	ldr	r5, [pc, #20]	@ (8002d90 <_sbrk_r+0x1c>)
 8002d7a:	4604      	mov	r4, r0
 8002d7c:	4608      	mov	r0, r1
 8002d7e:	602b      	str	r3, [r5, #0]
 8002d80:	f7fd fc78 	bl	8000674 <_sbrk>
 8002d84:	1c43      	adds	r3, r0, #1
 8002d86:	d102      	bne.n	8002d8e <_sbrk_r+0x1a>
 8002d88:	682b      	ldr	r3, [r5, #0]
 8002d8a:	b103      	cbz	r3, 8002d8e <_sbrk_r+0x1a>
 8002d8c:	6023      	str	r3, [r4, #0]
 8002d8e:	bd38      	pop	{r3, r4, r5, pc}
 8002d90:	200002e8 	.word	0x200002e8

08002d94 <memchr>:
 8002d94:	4603      	mov	r3, r0
 8002d96:	b510      	push	{r4, lr}
 8002d98:	b2c9      	uxtb	r1, r1
 8002d9a:	4402      	add	r2, r0
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	d101      	bne.n	8002da6 <memchr+0x12>
 8002da2:	2000      	movs	r0, #0
 8002da4:	e003      	b.n	8002dae <memchr+0x1a>
 8002da6:	7804      	ldrb	r4, [r0, #0]
 8002da8:	3301      	adds	r3, #1
 8002daa:	428c      	cmp	r4, r1
 8002dac:	d1f6      	bne.n	8002d9c <memchr+0x8>
 8002dae:	bd10      	pop	{r4, pc}

08002db0 <memcpy>:
 8002db0:	440a      	add	r2, r1
 8002db2:	4291      	cmp	r1, r2
 8002db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8002db8:	d100      	bne.n	8002dbc <memcpy+0xc>
 8002dba:	4770      	bx	lr
 8002dbc:	b510      	push	{r4, lr}
 8002dbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002dc2:	4291      	cmp	r1, r2
 8002dc4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002dc8:	d1f9      	bne.n	8002dbe <memcpy+0xe>
 8002dca:	bd10      	pop	{r4, pc}

08002dcc <_realloc_r>:
 8002dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002dd0:	4680      	mov	r8, r0
 8002dd2:	4615      	mov	r5, r2
 8002dd4:	460c      	mov	r4, r1
 8002dd6:	b921      	cbnz	r1, 8002de2 <_realloc_r+0x16>
 8002dd8:	4611      	mov	r1, r2
 8002dda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002dde:	f7ff bc39 	b.w	8002654 <_malloc_r>
 8002de2:	b92a      	cbnz	r2, 8002df0 <_realloc_r+0x24>
 8002de4:	f7ff fbcc 	bl	8002580 <_free_r>
 8002de8:	2400      	movs	r4, #0
 8002dea:	4620      	mov	r0, r4
 8002dec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002df0:	f000 f81a 	bl	8002e28 <_malloc_usable_size_r>
 8002df4:	4285      	cmp	r5, r0
 8002df6:	4606      	mov	r6, r0
 8002df8:	d802      	bhi.n	8002e00 <_realloc_r+0x34>
 8002dfa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8002dfe:	d8f4      	bhi.n	8002dea <_realloc_r+0x1e>
 8002e00:	4629      	mov	r1, r5
 8002e02:	4640      	mov	r0, r8
 8002e04:	f7ff fc26 	bl	8002654 <_malloc_r>
 8002e08:	4607      	mov	r7, r0
 8002e0a:	2800      	cmp	r0, #0
 8002e0c:	d0ec      	beq.n	8002de8 <_realloc_r+0x1c>
 8002e0e:	42b5      	cmp	r5, r6
 8002e10:	462a      	mov	r2, r5
 8002e12:	4621      	mov	r1, r4
 8002e14:	bf28      	it	cs
 8002e16:	4632      	movcs	r2, r6
 8002e18:	f7ff ffca 	bl	8002db0 <memcpy>
 8002e1c:	4621      	mov	r1, r4
 8002e1e:	4640      	mov	r0, r8
 8002e20:	f7ff fbae 	bl	8002580 <_free_r>
 8002e24:	463c      	mov	r4, r7
 8002e26:	e7e0      	b.n	8002dea <_realloc_r+0x1e>

08002e28 <_malloc_usable_size_r>:
 8002e28:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e2c:	1f18      	subs	r0, r3, #4
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	bfbc      	itt	lt
 8002e32:	580b      	ldrlt	r3, [r1, r0]
 8002e34:	18c0      	addlt	r0, r0, r3
 8002e36:	4770      	bx	lr

08002e38 <_init>:
 8002e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e3a:	bf00      	nop
 8002e3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e3e:	bc08      	pop	{r3}
 8002e40:	469e      	mov	lr, r3
 8002e42:	4770      	bx	lr

08002e44 <_fini>:
 8002e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e46:	bf00      	nop
 8002e48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e4a:	bc08      	pop	{r3}
 8002e4c:	469e      	mov	lr, r3
 8002e4e:	4770      	bx	lr
